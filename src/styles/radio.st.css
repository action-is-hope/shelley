@st-namespace "shelleyRadio";
/**
 * = Radio - radio.st.css
 *
 * Base theme styles for a Shelley Radio.
 *
 * CSS API: https://github.com/action-is-hope/shelley/blob/main/src/Radio/radio.st.css
 * 
 */

@st-import Shelley, [
  --spacing-unit,
  --color-error
] from "./project.st.css";
@st-import Radio from "../Radio/radio.st.css";
@st-import RadioGroup from "../Radio/radioGroup.st.css";
@st-import Icon from "../Icon/icon.st.css";
@st-import [
  SelectionControlFieldInput,
  RadioCheckboxCommon,
  RadioFieldInput,
  labelVol1,
  labelVol2,
  labelVol3,
  labelVol4,
  labelVol5,
  labelVol6,
  selectionControlSize1,
  selectionControlSize2,
  selectionControlSize3,
  selectionControlSize4,
  selectionControlSize5,
  selectionControlSize6
] from "./mixins/formElements.st.css";

@st-scope Shelley {

  Radio {
    gap: calc(var(--spacing-unit) / 2);
    cursor: pointer;
    line-height: 1.4;
  }

  Radio:has(:disabled),
  Radio::input:disabled {
    cursor: not-allowed;
  }

  Radio::input {
    -st-mixin: SelectionControlFieldInput;
  }

  Radio::input {
    -st-mixin: RadioCheckboxCommon;
  }

  Radio::input {
    -st-mixin: RadioFieldInput;
  }

  /* = States */
  Radio:isInvalid::text {
    color: var(--color-error);
  }

  Radio:isInvalid::input {
    border-color: var(--color-error);
  }

  Radio:isInvalid::input::before {
    background-color: var(--color-error);
  }

  Radio:isFocusVisible::input::after {
    opacity: 1;
  }

  Radio Icon {
    font-size: 2em;
  }

  /* === Radio: sizes ===*/

  Radio:size(1)::input {
    -st-mixin: selectionControlSize1
  }

  Radio:size(2)::input {
    -st-mixin: selectionControlSize2
  }

  Radio:size(3)::input {
    -st-mixin: selectionControlSize3
  }

  Radio:size(4)::input {
    -st-mixin: selectionControlSize4
  }

  Radio:size(5)::input {
    -st-mixin: selectionControlSize5
  }

  Radio:size(6)::input {
    -st-mixin: selectionControlSize6
  }


  /* ==== RADIOGROUP ====*/

  RadioGroup {}

  RadioGroup::group {
    display: flex;
    gap: calc(var(--spacing-unit) / 1.5);
  }

  RadioGroup:orientation(vertical)::group {
    flex-direction: column;
    gap: calc(var(--spacing-unit) - 2px);
  }

  RadioGroup:orientation(horizontal)::group {
    flex-flow: wrap;
    gap: 2em;
  }


  /* ==== RadioGroup: volume ====*/

  /* When in a RadioGroup the Radios use the same relative volume used for Field->label.*/
  RadioGroup:vol(1) Radio::text {
    -st-mixin: labelVol1
  }

  RadioGroup:vol(2) Radio::text {
    -st-mixin: labelVol2
  }

  RadioGroup:vol(3) Radio::text {
    -st-mixin: labelVol3
  }

  RadioGroup:vol(4) Radio::text {
    -st-mixin: labelVol4
  }

  RadioGroup:vol(5) Radio::text {
    -st-mixin: labelVol5
  }

  RadioGroup:vol(6) Radio::text {
    -st-mixin: labelVol6
  }
}
