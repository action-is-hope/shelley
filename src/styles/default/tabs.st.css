@st-namespace "DefaultTabs";
/**
 * = Tabs - tabs.st.css
 *
 * Base theme styles for a Shelley Tabs.
 *
 * CSS API: https://github.com/action-is-hope/shelley/blob/main/src/Tabs/tabs.st.css
 * 
 */
@st-import [
  --spacing-unit,
  --bg-secondary,
  --color-ui-rgb,
  --tone-lead
] from "./project.st.css";
@st-import Tabs from "../../Tabs/tabs.st.css";
@st-import [textVol1, textVol2, textVol3] from "./mixins/textVol.st.css";
@st-import [pseudoFocus, pseudoFocusVisible] from "./mixins/focus.st.css";

@st-scope body {

  Tabs {
    display: flex;
    flex-direction: column;
  }

  Tabs:orientation(vertical) {
    display: flex;
    flex-direction: row;
  }

  Tabs::indicator {
    /* 'indicator' is the bar which moves left-right, up-down dependant on orientation. 
   * The animations for width (orientation=horizontal) and height (orientation=vertical) 
   * are calculated by the component and applied inline. We will need to set the thickness 
   * of the indicator for both orientations. */
    position: absolute;
    will-change: width, height, transform;
    transition: transform 150ms, width 100ms, height 100ms;
    background-color: var(--tone-lead);
  }


  Tabs:orientation(vertical)::indicator {
    right: 0;
    top: 0;
    /* thickness of indicator when vertical. */
    width: 2px;
    will-change: transform, height;
  }

  Tabs:orientation(horizontal)::indicator {
    left: 0;
    /* thickness of indicator when horizontal. */
    height: 2px;
    /* Pull up on top of tabList border. */
    margin-top: -2px;
    will-change: transform, width;
  }

  /*= TabListContainer =*/

  Tabs::tabListContainer {
    position: relative;
  }

  /*= TabList =*/

  Tabs::tabList {
    display: flex;
    gap: calc(var(--spacing-unit) / 2);
    border-bottom: 2px solid var(--bg-secondary);
  }

  Tabs:orientation(vertical)::tabList {
    flex-direction: column;
    border-bottom: none;
    border-right: 2px solid var(--bg-secondary);
  }

  /*= Tab =*/
  Tabs::tab {
    padding: var(--spacing-unit);
    outline: none;
    /* required for the pseudoFocus. */
    position: relative;
    margin-right: 10px;
    cursor: pointer;
  }

  Tabs::tab:isDisabled {
    color: rgba(var(--color-ui-rgb), 0.5);
    cursor: not-allowed;
  }

  Tabs::tab::after {
    -st-mixin: pseudoFocus;
    top: 9px;
    left: 4px;
    bottom: 9px;
    right: 4px;
  }

  Tabs::tab:isFocusVisible::after {
    -st-mixin: pseudoFocusVisible;
  }

  /*= TabPanel =*/
  Tabs::tabPanel {
    flex-grow: 1;
    padding: var(--spacing-unit);
  }

  /*= Volumes =*/
  Tabs:vol(1)::tab {
    -st-mixin: textVol1;
  }

  Tabs:vol(2)::tab {
    -st-mixin: textVol2;
  }

  Tabs:vol(3)::tab {
    -st-mixin: textVol3;
  }
}
