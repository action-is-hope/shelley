/**
 * = INPUT BASE - inputBase.st.css
 *
 * This file applies the base styles to our textal form components such as 
 * inputs, textareas and selects or any compbo boxes we might construct.
 *
 * Most of the base styles live in the mixins so they can be shared but the 
 * variants are styled here as they are more specific to our markup.
 * 
 * ========================================================================= */


:import {
  -st-from: "./project.st.css";
  -st-default: Default;
  -st-named:
    --spacing-unit,
    --color-error,
    --color-focus,
    --color-form-base-border;
}

/* = Root Component */
:import {
  -st-from: "../../components/InputBase/inputBase.st.css";
  -st-default: InputBase;
  -st-named: fieldInput
}

:import {
  -st-from: "../../components/InputAdornment/inputAdornment.st.css";
  -st-default: Adornment;
}

/* = Mixins */
:import {
  -st-from: './mixins/formElements.st.css';
  -st-named:
    textualFieldRoot,
    textualFieldContainer,
    startFieldIndicatorHasError,
    startFieldIndicator,
    textualFieldInput,
    disabledField,
    inputVol1,
    inputVol2,
    inputVol3,
    inputVol4,
    inputVol5,
    inputVol6,
    label,
    labelSmall;
}

@st-scope Default {

  /*==== BASE ====*/

  InputBase {
    -st-mixin: textualFieldRoot;
  }

  InputBase::fieldContainer {
    -st-mixin: textualFieldContainer;
  }

  /* = Native input field. */
  InputBase::fieldInput {
    -st-mixin: textualFieldInput;
  }

  /* = Use a named import as a class to get the adjacent selectors working. */
  InputBase Adornment + .fieldInput,
  InputBase::fieldInput + Adornment {
    margin-left: calc(-.2rem - var(--spacing-unit));
  }

  InputBase::helpText {
    margin-top: calc(var(--spacing-unit) / 4);
  }

  InputBase::helpText::before {
    display: block;
  }

  /* = Textarea wrapper which can be used for scrolling. */
  InputBase::textAreaWrap {
    display: block;
    width: 100%;
  }


  /*==== STATES ====*/

  /* InputBase:labelposition(side) {
    align-items: flex-start;
    display: inline-flex;
  } */

  /* = Error */
  InputBase:error::fieldContainer {
    /* -st-mixin: startFieldIndicatorHasError */
  }

  /* = Disabled */
  InputBase:disabled {
    -st-mixin: disabledField
  }

  /*==== VOLUMES ====*/

  /* = Volume 1 */
  InputBase:vol(1) {
    -st-mixin: inputVol1;
  }

  /* = Volume 2 */
  InputBase:vol(2) {
    -st-mixin: inputVol2;
  }

  /* = Volume 3 */
  InputBase:vol(3) {
    -st-mixin: inputVol3
  }


  /* = Volume 4 */
  InputBase:vol(4) {
    -st-mixin: inputVol4
  }

  /* = Volume 5 */
  InputBase:vol(5) {
    -st-mixin: inputVol5
  }

  /* = Volume 6 */
  InputBase:vol(6) {
    -st-mixin: inputVol6
  }



  /*==== VARIANTS ====*/


  InputBase:labelPosition(over)::inputLabel {
    -st-mixin: label;
    transform: translate(0.7rem, 8px) scale(1);
  }

  InputBase:labelPosition(over)::helpText {
    font-size: 0.75em;
  }

  InputBase:labelPosition(over):focus-within::inputLabel,
  InputBase:labelPosition(over):hasValue::inputLabel {
    transform: translate(0.7rem, -0.73em);
  }

  InputBase:labelPosition(over)::legend {}


  /* Side */
  InputBase:labelPosition(side) {
    column-gap: var(--spacing-unit);
  }

  InputBase:labelPosition(side)::inputLabel {
    justify-self: flex-end;
  }


  /* = Variant - "quiet" */
  /* InputBase:variant(quiet) + InputBase:variant(quiet) {
    margin-top: calc(var(--spacing-unit) * 1)
  } */

  InputBase:variant(quiet)::fieldContainer {
    -st-mixin: startFieldIndicator;
  }

  InputBase:variant(quiet):error::fieldContainer {
    -st-mixin: startFieldIndicatorHasError
  }

  InputBase:variant(quiet)::fieldset {
    border-color: transparent;
  }

  /* = Variant - "Outlined" */

  InputBase:variant(outlined)::fieldset {
    border-color: var(--color-form-base-border);
  }

  InputBase:variant(outlined)::fieldset,
  InputBase:variant(outlined)::fieldContainer {
    border-radius: 8px;
  }

  InputBase:variant(outlined):error::fieldset {
    border-left-color: transparent;
    box-shadow: -1px 0 0px 0px var(--color-error);
  }

  InputBase:variant(outlined):focus-within::fieldset {
    border-left-color: transparent;
    box-shadow: -1px 0 0px 0px var(--color-focus);
  }

  InputBase:variant(outlined):focus-within::fieldContainer {
    box-shadow: 1px 0 0px 0px var(--color-focus);
  }

  /* = Variant - "Filled" */

  InputBase:variant(filled)::fieldset {
    border-color: transparent;

  }

  InputBase:variant(filled)::fieldset,
  InputBase:variant(filled)::fieldContainer {
    border-radius: 8px;
  }

  InputBase:variant(filled)::fieldContainer {
    background-color: #1e212c
  }

  InputBase:variant(filled):error::fieldset {
    border-left-color: transparent;
    box-shadow: -1px 0 0px 0px var(--color-error);
  }

  InputBase:variant(filled):focus-within::fieldset {
    border-left-color: transparent;
    box-shadow: -1px 0 0px 0px var(--color-focus);
  }

  InputBase:variant(filled):focus-within::fieldContainer {
    box-shadow: 1px 0 0px 0px var(--color-focus);
  }

}
