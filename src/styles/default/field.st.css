/**
 * = Field - field.st.css
 *
 * Used internally; field applies the base styles to our form components such as 
 * inputs, textareas and selects, comboboxes, checkbox / radio groups etc.
 * 
 * CSS API: https://github.com/action-is-hope/shelley/blob/main/src/components/Radio/radio.st.css
 *
 */

@st-import Default, [
    --spacing-unit,
    --field-padding,
    --border-radius-field,
    --text-vol-3-scale, --text-vol-3-max,
    --text-vol-4-scale, --text-vol-4-max,
    --text-vol-5-scale, --text-vol-5-max,
    --text-vol-6-scale, --text-vol-6-max,
    --color-error,
    --color-focus,
    --color-form-base-border,
    --color-background-textField-filled
  ] from "./project.st.css";
@st-import Field from "../../components/Field/field.st.css";
@st-import [respScale] from "../formatters/common";
@st-import [
    hideWebkitAppearance,
    disabledField,
    inputVol1,
    inputVol2,
    inputVol3,
    inputVol4,
    inputVol5,
    inputVol6
] from "./mixins/formElements.st.css";


@st-scope Default {

  /* 
  * Field ships with some minimal styles to get some of the 
  * prop values working to a point, including some of the stuff 
  * enabling labelPosition(over). 
  * 
  * By default a grid layout is provided for all labelPosition's,
  * you could deviate from grid but just know to adjust the default 
  * values mentioned aove. 
  * 
  * Default styles can be found via inspector or direct link:
  * https://github.com/action-is-hope/shelley/blob/main/src/components/Field/field.st.css
  *
  */

  Field {
    /* defaults to display->grid, align->center. */
  }

  Field::fieldContainer {
    /* defaults to display->inline-flex, position->relative. */
  }

  Field::inputLabel {
    font-weight: 400;
    font-size: 1em;
  }

  /* = Native input field - just resets and genenics, padding etc. */
  Field::fieldInput {
    -st-mixin: hideWebkitAppearance;
    background: none;
    color: currentColor;
    resize: none;
    outline: none;
    display: block;
    width: 100%;
    margin: 0;
    padding: var(--field-padding);
    border: none;
    font: inherit;
    line-height: 1.5;
  }

  /* = Pulls the input towards the adornments cancelling out the input padding. */
  Field::startAdornment {
    /*rtl*/
    margin-right: calc(-.2rem - var(--spacing-unit));
  }

  Field::endAdornment {
    /*rtl*/
    margin-left: calc(-.2rem - var(--spacing-unit));
  }

  Field::helpText {
    font-size: 0.75em;
    margin-top: calc(var(--spacing-unit) / 2);
  }

  Field::helpText::before {
    display: block;
  }

  /* = Textarea wrapper which can be used for scrolling. */
  Field::textAreaWrap {
    display: block;
    width: 100%;
  }


  /*==== STATES ====*/

  /* = Error */
  Field:error::fieldContainer {
    /* -st-mixin: startFieldIndicatorHasError */
  }

  /* = Disabled */
  Field:isDisabled {
    -st-mixin: disabledField
  }

  /*==== VOLUMES ====*/

  /* = Volume 1 */
  Field:vol(1) {
    -st-mixin: inputVol1;
  }

  /* = Volume 2 */
  Field:vol(2) {
    -st-mixin: inputVol2;
  }

  /* = Volume 3 */
  Field:vol(3) {
    -st-mixin: inputVol3
  }

  /* = Volume 4 */
  Field:vol(4) {
    -st-mixin: inputVol4
  }

  /* = Volume 5 */
  Field:vol(5) {
    -st-mixin: inputVol5
  }

  /* = Volume 6 */
  Field:vol(6) {
    -st-mixin: inputVol6
  }


  /*==== VARIANTS ====*/

  /* = labelPosition */

  /* = Over */
  /* Setting this up is fiddly expecially with scaling fonts, be patient :-) */
  Field:labelPosition(over)::inputLabel {
    /* Ensure the label->over to be the same size as the input text - 1em. */
    font-size: 1em;
    /* This should match the form fields. */
    line-height: 1.5em;
    /* 
    * This isn't scientific in the slightest! I just fiddled with the 
    * variable values until I found a universal vertical movement that 
    * aligned with the placeholder for all the volume sizes we have set,
    * that way we don't have to set one for each volume. 
    */
    transform: translate(0.7rem, calc(50% - .5em + 3.5px)) scale(1);
  }

  /*
  * If you change the font-sizes you will likely need to tweak the above 
  * transform(X, Y) Y value. To help you out it is helful to set the
  * placeholder to be visible whilst you hone in the value, like so:
  */
  /* 
    Field:labelPosition(over)::inputLabel,
    Field:labelPosition(over)::inputLabel {
      opacity: 1;
      color: blueviolet;
    } 
  */

  Field:labelPosition(over)::helpText {
    padding: 0 var(--spacing-unit);
  }

  Field:labelPosition(over):focus-within::inputLabel,
  Field:labelPosition(over):hasValue::inputLabel {
    transform: translate(0.7rem, -0.6em) scale(0.75);
  }

  Field:labelPosition(over)::legend {}


  /* = Side */
  Field:labelPosition(side) {
    column-gap: var(--spacing-unit);
  }

  Field:labelPosition(side)::inputLabel {
    justify-self: flex-end;
    text-align: end;
  }

  /* = Top */

  Field:labelPosition(top)::inputLabel {
    margin-bottom: calc(var(--spacing-unit) / 2);
  }


  /*==== VARIANTS ====*/

  /* = Quiet */

  /**
   * 'quiet' is a dulled down field so we are creating indicator 
   * bars for the sides. */
  Field:variant(quiet)::fieldContainer::before,
  Field:variant(quiet)::fieldContainer::after {
    position: absolute;
    top: 0;
    bottom: 0;
    content: "";
    width: 1px;
    transition: background-color 0.3s;
    background-color: var(--color-form-base-border);
  }

  Field:variant(quiet)::fieldContainer::before {
    display: block;
    left: 0;
  }

  Field:variant(quiet)::fieldContainer::after {
    right: 0;
    /* = Only to show the first edge indicator by default - host components may apply . */
    display: none;
  }

  Field:variant(quiet)::fieldContainer:focus-within::before,
  Field:variant(quiet)::fieldContainer:focus-within::after {
    /* = Adjust the pseudo field indicators to cater for custom focus style. */
    opacity: 1;
    /* = The glow from the box-shadow means we don't want the width to be too 'chunky'. */
    width: 0;
    /* = Give us that 'glow' effect for the focused state.*/
    box-shadow: 0 0 1px 1px var(--color-focus);
  }

  Field:variant(quiet):error::fieldContainer::before,
  Field:variant(quiet):error::fieldContainer::after {
    background-color: var(--color-error);
  }

  Field:variant(quiet)::fieldset {
    border-color: transparent;
  }

  /* = Outlined */

  Field:variant(outlined)::fieldset {
    border-color: var(--color-form-base-border);
  }

  Field:variant(outlined)::fieldset,
  Field:variant(outlined)::fieldContainer {
    border-radius: var(--border-radius-field);
  }

  Field:variant(outlined):error::fieldset {
    border-color: var(--color-error);
  }

  Field:variant(outlined):focus-within::fieldset {
    border-color: var(--color-focus);
  }

  /* = Filled */

  Field:variant(filled)::fieldset {
    border-color: transparent;
  }

  Field:variant(filled)::fieldset,
  Field:variant(filled)::fieldContainer {
    border-radius: var(--border-radius-field);
  }

  Field:variant(filled)::fieldContainer {
    background-color: var(--color-background-textField-filled)
  }

  Field:variant(filled):error::fieldset {
    border-color: var(--color-error);
  }

  Field:variant(filled):focus-within::fieldset {
    border-color: var(--color-focus);
  }
}
