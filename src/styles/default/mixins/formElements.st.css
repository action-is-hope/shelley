/**
 * = FORM ELEMENTS - formElements.st.css
 *
 * 
 * Whilst it's nice to always use our form items usually we will have to style 
 * forms that are not within our control. We might need to integrate a 
 * newsletter widget or perhaps a media selection widget, etc.
 *
 * Here you will find the base styles for form input elements which are mixin'd
 * to our form .st.css styles. You can use reuse them in the same way to when 
 * styling for 3rd party form elements.
 *
 * Maybe the file is too long, we just like these all togther. Lots of comments 
 * but much longer and we'll consider splitting them.. but most everyting else 
 * should be variant overrides in situ.
 * 
 * ========================================================================= */


/* = Project and vars. */
:import {
  -st-from: "../project.st.css";
  -st-named:
    --spacing-unit,
    --text-vol-3-scale, --text-vol-3-max,
    --text-vol-4-scale, --text-vol-4-max,
    --text-vol-5-scale, --text-vol-5-max,
    --text-vol-6-scale, --text-vol-6-max,
    /* = CSS3 Vars. */
    --color-focus,
    --color-error,
    --color-form-base-border,
    --color-form-selection-border,
    --color-form-selection-notch,
    --color-toggle-notch,
    --select-icon;

}

/* = Root Component */
:import {
  -st-from: './text.st.css';
  -st-named:
    textVol;
}

/* = Child components */
:import {
  -st-from: "../../../components/Label/label.st.css";
  -st-default: InputLabel;
}

:import {
  -st-from: "../../../components/InputSelectionControl/inputSelectionControl.st.css";
  -st-default: SelectionControl;
}

/* = Mixins & Utils */

:import {
  -st-from: "../../formatters/common";
  -st-named: respScale;
}

:import {
  -st-from: '../mixins/focus.st.css';
  -st-named:
    pseudoFocus,
    pseudoFocusVisible;
}

/* Local buildtime vars. */
:vars {
  inputVol1Label: "0.95em";
  inputVol1SelectionControl: "16px";
  inputVol2Label: "0.9em";
  inputVol2SelectionControl: "20px";
  inputVol3Label: "0.85em";
  inputVol3SelectionControl: "24px";
  inputVol4Label: "0.8em";
  inputVol4SelectionControl: "28px";
  inputVol5Label: "0.75em";
  inputVol5SelectionControl: "32px";
  inputVol6Label: "0.7em";
  inputVol6SelectionControl: "36px";
}

/**
 * = Helper mixins
 *
 * Some resued bits, they can be used externally.
 *
 * ------------------------------------------------------------------------- */

/* = Hide the default 'appearance'. */
.hideWebkitAppearance {
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  -o-appearance: none;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
}

/* = Hack to get rid of the bloody autofill bg 
 * - https://webagility.com/posts/the-ultimate-list-of-hacks-for-chromes-forced-yellow-background-on-autocompleted-inputs 
 */
.hideWebkitAppearance:-webkit-autofill,
.hideWebkitAppearance:-webkit-autofill:hover,
.hideWebkitAppearance:-webkit-autofill:focus,
.hideWebkitAppearance:-webkit-autofill:active {
  transition-delay: 99999s;
  -webkit-transition-delay: 99999s;
}



/**
 * = BASE - TEXTUAL FIELD
 *
 * Text, Number, Select, Combo style fields are all examples of what we mean by
 * 'textual', they are text orientaed I guess. Naming things is a nightmare!
 *
 * ------------------------------------------------------------------------- */

/* = The 'root' element - <div> */
.textualFieldRoot {
  /* 
    Showing the error before the field in question is the most logical but in 
    practice we want to render it below so as to avoid the field moving when
    it is in an eror state. We are using flex to move the error but you could 
    use grid with named grid-lines but wider support exists for flex so less 
    fallbacks are required. We might use grid in future though.?
  */
  display: flex;
  flex-direction: column;
}

/* = Field container - <div> */
.textualFieldContainer {
  position: relative;
  display: inline-flex;
  line-height: 1.5;
}

/* = Field indicator, via pseudo. */
.textualFieldContainer::before,
.textualFieldContainer::after {
  position: absolute;
  top: 0;
  bottom: 0;
  content: "";
  width: 1px;
  transition: background-color 0.3s;
  background-color: var(--color-form-base-border);
}

.textualFieldContainer::before {
  display: block;
  left: 0;
}

.textualFieldContainer::after {
  right: 0;
  /* = Choosing only to show the first edge indicator by default. */
  display: none;
}

/* = The actual field <input> */
.textualFieldInput {
  -st-mixin: hideWebkitAppearance;
  background: none;
  color: currentColor;
  resize: none;
  outline: none;
  display: block;
  width: 100%;
  margin: 0;
  padding: calc(0.2rem + 0.2em) var(--spacing-unit);
  border: none;
  font: inherit;
  line-height: 1.5;
}



/**
 * = SELECT - TEXTUAL FIELD 
 *
 * Uses all of the about textual base styles but a <select> has a little 
 * extra styling over that of our <input>'s.
 *
 * ------------------------------------------------------------------------- */


.selectFieldContainer {
  /* filter: brightness(0.5) sepia(1) hue-rotate(-70deg) saturate(5); */
}

/* = Apply the --select-icon (see project vars) and associated icon styles. */
.selectFieldInput {
  border-radius: 0;
  background-repeat: no-repeat;
  background-size: 18px 18px;
  background-position: right 18px top 50%;
  padding-right: calc(2 * var(--spacing-unit));
  background-image: var(--select-icon);
}

/**
 * = STATES - TEXTUAL FIELD
 *
 * Input focus, error and disabled state being the main areas of concern for 
 * our text orientated fields.
 *
 * ------------------------------------------------------------------------- */


/* = Focus - custom */
.textualFieldContainer:focus-within::before,
.textualFieldContainer:focus-within::after {
  /* = Adjust the pseudo feild indicators to cater for custom focus style. */
  opacity: 1;
  /* = The glow from the box-shadow means we don't want the width, too chunky. */
  width: 0;
  /* = Give us that 'glow' effect for the focused state.*/
  box-shadow: 0 0 1px 1px var(--color-focus);
}

/* = Error */
.textualFieldContainerHasError::before,
.textualFieldContainerHasError::after {
  /* = Adjust the pseudo feild indicators to cater for custom focus style. */
  /* display: block; */
  background-color: var(--color-error);
}

/* = Disabled */
.disabledField {
  /* = Dim the whole lot... */
  filter: saturate(15%) brightness(70%);
}


/**
 * = INPUT VOLUMES - COMMON
 *
 * When it comes to our input volumes we want to make sure that they are never
 * below 16px on device else we will get some auto 'form zoom' happening which 
 * can catch you off guard. "Why is is zooming, FFS!" ;-)
 *
 * To this end our volume levels take a slight detour from those we use for Text
 * but we are leveraging them where possible.
 *
 * We take advantage of the scale by applying it to the root of our input 
 * containers and using it to apply a relative scale to our labels using ems.
 * This is great as it means that we don't have to churn out a load more media 
 * queries.
 *
 * ------------------------------------------------------------------------- */


/* = Volume 1 */
.inputVol1 {
  /* = equates to 16px all the way from mobile to desktop. */
  font-size: 1em;
}

.inputVol1 InputLabel {
  font-size: value(inputVol1Label);
}

.inputVol1 SelectionControl {
  font-size: value(inputVol1SelectionControl);
}

/* = Volume 2 */
.inputVol2 {
  /* Uses the default from the mixin 16px -> 18px a useful alternative for vol2. */
  -st-mixin:
    textVol;
}

.inputVol2 InputLabel {
  font-size: value(inputVol2Label);
}

.inputVol2 SelectionControl {
  font-size: value(inputVol2SelectionControl);
}

/* = Volume 3 */
.inputVol3 {
  -st-mixin:
    textVol(scale var(--text-vol-3-scale),
      max var(--text-vol-3-max));
}

.inputVol3 InputLabel {
  font-size: value(inputVol3Label);
}

.inputVol3 SelectionControl {
  font-size: value(inputVol3SelectionControl);
}

/* = Volume 4 */
.inputVol4 {
  -st-mixin:
    textVol(scale var(--text-vol-4-scale),
      max var(--text-vol-4-max));
}

.inputVol4 InputLabel {
  font-size: value(inputVol4Label);
}

.inputVol4 SelectionControl {
  font-size: value(inputVol4SelectionControl);
}

/* = Volume 5 */
.inputVol5 {
  /* We love calc!! Here we can shave off a little from our larger sizes, our 
   * our rem value is on a scale so has greater impact at larger
   * resoultions. What fun!
   */
  -st-mixin:
    textVol(scale calc(var(--text-vol-5-scale) - 0.15rem),
      max calc(var(--text-vol-5-max) - 0.15rem));
}

.inputVol5 InputLabel {
  font-size: value(inputVol5Label);
}

.inputVol5 SelectionControl {
  font-size: value(inputVol5SelectionControl);
}

/* = Volume 6 */
.inputVol6 {
  /* We love calc!! Here we can shave off a little from our larger sizes, our 
   * our rem value is on a scale so this has greated impact at larges 
   * resoultions. What fun!
   */
  -st-mixin:
    textVol(scale calc(var(--text-vol-6-scale) - 0.15rem),
      max calc(var(--text-vol-6-max) - 0.15rem));
}

.inputVol6 InputLabel {
  font-size: value(inputVol6Label);
}

.inputVol6 SelectionControl {
  font-size: 36px;
  font-size: value(inputVol6SelectionControl);
}




/**
 * = INPUT SELECTION CONTROLS
 *
 * Checkboxes, radios, toggles and switches.
 *
 * ------------------------------------------------------------------------- */


/* = 'Root' of the control - <span> */
.SelectionControlRoot {
  /* = flex is a more solid base that inline-flex. It should always be inside a label which can give it 'inline' qualities as a component. */
  display: flex;
  /* = Force hardware acceleration on... Why did I do this...? Commenting for now. */
  /* transform: translateZ(0); */
  /* = A default, maybe we should remove it... */
  font-size: 20px;
}


/* = The actual field - <input> */
.SelectionControlFieldInput {
  -st-mixin: hideWebkitAppearance;
  font-size: inherit;
  background: transparent;
  height: 1em;
  width: 1em;
  cursor: pointer;
  position: relative;
  border-radius: 0;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  /* = See below for replacement, I know, I know "if we must". We must! ;-) */
  outline: none;
  border-style: solid;
  border-width: 2px;
  border-color: #333;
  border-color: var(--color-form-selection-border);
}

/* = Field focus indicator, via pseudo element. */
.SelectionControlFieldInput::after {
  -st-mixin: pseudoFocus;
}

/* = Set: Both active and focus to avoid the vanishing of the focus style when active. */
.SelectionControlFieldInput:focus::after,
.SelectionControlFieldInput:active::after {
  -st-mixin: pseudoFocusVisible
}

@-moz-document url-prefix() {
  /* = See inputSelectionControl.st.css for FF issue. @stylable not picking up. */
}

/* = For future: 
 * https://developer.paciellogroup.com/blog/2018/03/focus-visible-and-backwards-compatibility/ 
 */


/**
 * = DISABLED - COMMON
 */

/* = Hide the pesudo focus style when field is disabled. */
.SelectionControlFieldInput:disabled::after {
  opacity: 0;
}

/* = Dull out the field and apply suitable cursor. */
.SelectionControlFieldInput:disabled {
  cursor: not-allowed;
  filter: saturate(15%) brightness(70%);
}


/**
 * = RADIO / CHECKBOX - COMMON
 */
.RadioCheckboxCommon {}

/* = The 'mark' of the field, radio and checkboxes both have one. */
.RadioCheckboxCommon::before {
  content: "";
  transition: opacity 120ms;
  width: 0.5em;
  height: 0.5em;
  opacity: 0;
  display: block;
  background-color: #ddd;
  background-color: var(--color-form-selection-notch);
}

.RadioCheckboxCommon:checked::before {
  opacity: 1;
}

/**
 * = RADIO
 */
.RadioFieldInput,
.RadioFieldInput::before,
.RadioFieldInput::after {
  border-radius: 50%;
}

/**
 * = CHECKBOX
 */
.CheckboxFieldInput {}


/**
 * = TOGGLE
 *
 * Which is really just a checkbox in disguise...
 */

.ToggleFieldInput {
  width: 2em;
  border-radius: 9999px;
}

.ToggleFieldInput::after {
  border-radius: 9999px;
}

.ToggleFieldInput::before {
  content: "";
  position: absolute;
  width: 1.3em;
  height: 1.3em;
  border-radius: 9999px;
  transition: all 0.2s;
  transform: translate(-50%);
  z-index: 1;
  background-color: var(--color-toggle-notch);
}

.ToggleFieldInput:checked::before {
  transform: translate(50%);
  background-color: var(--color-form-selection-notch);
}

/* .SwitchFieldInput {} */
