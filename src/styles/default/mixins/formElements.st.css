/**
 * = FORM ELEMENTS - formElements.st.css
 *
 * Shared styles for form related elements.
 * 
 * ========================================================================= */

@st-import Default, [
    --spacing-unit,
    --text-vol-3-scale, --text-vol-3-max,
    --text-vol-4-scale, --text-vol-4-max,
    --text-vol-5-scale, --text-vol-5-max,
    --text-vol-6-scale, --text-vol-6-max,,
    --color-form-selection-border,
    --color-form-selection-notch,
    --color-switch-notch
  ] from "../project.st.css";
@st-import InputLabel from "../../../Label/label.st.css";
@st-import [textVol] from "./text.st.css";
@st-import [pseudoFocus, pseudoFocusVisible] from "./focus.st.css";


/* Local vars. */
:vars {
  inputVol1LabelRelative: "0.95em";
  inputVol2LabelRelative: "0.9em";
  inputVol3LabelRelative: "0.85em";
  inputVol4LabelRelative: "0.8em";
  inputVol5LabelRelative: "0.75em";
  inputVol6LabelRelative: "0.7em";
  SelectionControlSize1: "16px";
  SelectionControlSize2: "20px";
  SelectionControlSize3: "24px";
  SelectionControlSize4: "28px";
  SelectionControlSize5: "32px";
  SelectionControlSize6: "36px";
}

/* = Hide the default 'appearance'. */
.hideWebkitAppearance {
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  -o-appearance: none;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
}

/* = Hack to get rid of the autofill bg 
 * - https://webagility.com/posts/the-ultimate-list-of-hacks-for-chromes-forced-yellow-background-on-autocompleted-inputs 
 */
.hideWebkitAppearance:-webkit-autofill,
.hideWebkitAppearance:-webkit-autofill:hover,
.hideWebkitAppearance:-webkit-autofill:focus,
.hideWebkitAppearance:-webkit-autofill:active {
  transition-delay: 99999s;
  -webkit-transition-delay: 99999s;
}

.disabledField {
  /* = Dim the whole lot... */
  filter: saturate(15%) brightness(70%);
}


/**
 * = INPUT VOLUMES
 *
 * When it comes to our input volumes we want to make sure that they are never
 * below 16px on device else we will get some auto 'form zoom' happening which 
 * can catch you off guard, especially in a demo.
 *
 * To this end our volume levels take a slight detour from those we use for Text
 * but we are leveraging them where possible.
 *
 * We take advantage of the scale by applying it to the root of our input 
 * containers and using it to apply a relative scale to our labels using ems.
 * This is great as it means that we don't have to churn out a load more media 
 * queries.
 *
 * ------------------------------------------------------------------------- */


/* = Volume 1 */
.inputVol1 {
  /* = equates to 16px all the way from mobile to desktop. */
  font-size: 1em;
}

.inputVol1 > InputLabel,
.labelVol1 {
  font-size: value(inputVol1LabelRelative);
}

.selectionControlSize1 {
  font-size: value(SelectionControlSize1);
}

/* = Volume 2 */
.inputVol2 {
  /* Uses the default from the mixin 16px -> 18px a useful alternative for vol2. */
  -st-mixin: textVol;
}

.inputVol2 > InputLabel,
.labelVol2 {
  font-size: value(inputVol2LabelRelative);
}

.selectionControlSize2 {
  font-size: value(SelectionControlSize2);
}

/* = Volume 3 */
.inputVol3 {
  -st-mixin:
    textVol(scale var(--text-vol-3-scale),
      max var(--text-vol-3-max));
}

.inputVol3 > InputLabel,
.labelVol3 {
  font-size: value(inputVol3LabelRelative);
}

.selectionControlSize3 {
  font-size: value(SelectionControlSize3);
}

/* = Volume 4 */
.inputVol4 {
  -st-mixin:
    textVol(scale var(--text-vol-4-scale),
      max var(--text-vol-4-max));
}

.inputVol4 > InputLabel,
.labelVol4 {
  font-size: value(inputVol4LabelRelative);
}

.selectionControlSize4 {
  font-size: value(SelectionControlSize4);
}

/* = Volume 5 */
.inputVol5 {
  /* Here we can shave off a little from our larger sizes, our 
   * rem value is on a scale so has greater impact at larger
   * resoultions.
   */
  -st-mixin:
    textVol(scale calc(var(--text-vol-5-scale) - 0.15rem),
      max calc(var(--text-vol-5-max) - 0.15rem));
}

.inputVol5 > InputLabel,
.labelVol5 {
  font-size: value(inputVol5LabelRelative);
}

.selectionControlSize5 {
  font-size: value(SelectionControlSize5);
}

/* = Volume 6 */
.inputVol6 {
  -st-mixin:
    textVol(scale calc(var(--text-vol-6-scale) - 0.15rem),
      max calc(var(--text-vol-6-max) - 0.15rem));
}

.inputVol6 > InputLabel,
.labelVol6 {
  font-size: value(inputVol6LabelRelative);
}

.selectionControlSize6 {
  font-size: 36px;
  font-size: value(SelectionControlSize6);
}


/**
 * = INPUT SELECTION CONTROLS
 *
 * Checkboxes, radios and switches.
 *
 * ------------------------------------------------------------------------- */


/* = 'Root' of the control */
.SelectionControlInputContainer {
  display: flex;
}


/* = The actual field - <input> */
.SelectionControlFieldInput {
  -st-mixin: hideWebkitAppearance;
  font-size: inherit;
  background: transparent;
  height: 1em;
  width: 1em;
  margin: 0;
  cursor: pointer;
  position: relative;
  border-radius: 0;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-style: solid;
  border-width: 2px;
  border-color: #333;
  border-color: var(--color-form-selection-border);
  /* = pseudoFocus mixin replaces the default outline. */
  outline: none;
}

.SelectionControlFieldInput::after {
  /* = Field focus indicator, via pseudo element. */
  -st-mixin: pseudoFocus;
}

.SelectionControlFieldInput:disabled {
  -st-mixin: disabledField;
}


/**
 * = RADIO / CHECKBOX - COMMON
 */
.RadioCheckboxCommon {}

/* = The 'mark' of the field, radio and checkboxes both have one. */
.RadioCheckboxCommon::before {
  content: "";
  transition: opacity 120ms, height 120ms;
  width: 0.5em;
  height: 0.5em;
  opacity: 0;
  display: block;
  background-color: var(--color-form-selection-notch);
  position: absolute;
}

/**
 * = RADIO
 */
.RadioFieldInput,
.RadioFieldInput::before,
.RadioFieldInput::after {
  border-radius: 50%;
}

.RadioFieldInput:checked::before {
  opacity: 1;
}

/**
 * = CHECKBOX
 */

.CheckboxFieldInput:checked::before {
  opacity: 1;
}

.CheckboxIsIndeterminate::before {
  opacity: 1;
  height: 0.1em;
}


/**
 * = SWITCH
 *
 * Which is really just a checkbox in disguise...
 */

.SwitchFieldInput {
  width: 2em;
  border-radius: 9999px;
}

.SwitchFieldInput::after {
  border-radius: 9999px;
}

.SwitchFieldInput::before {
  content: "";
  position: absolute;
  width: 1.3em;
  height: 1.3em;
  border-radius: 9999px;
  transition: all 0.2s;
  transform: translate(-50%);
  z-index: 1;
  background-color: var(--color-switch-notch);
}

.SwitchFieldInput:checked::before {
  transform: translate(50%);
  background-color: var(--color-form-selection-notch);
}
