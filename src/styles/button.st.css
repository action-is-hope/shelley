@st-namespace "DefaultButton";
/**
 * = Button - button.st.css
 *
 * Base theme styles for a Shelley Button.
 *
 * CSS API: https://github.com/action-is-hope/shelley/blob/main/src/Button/button.st.css
 * 
 */
@st-import [
  --spacing-unit,
  --button-radius,
  --button-border-width,
  --button-hover-rgb,
  --light-01,
  --dark-02,
  --color-ui,
  --color-ui-inverse,
  --color-ui-rgb,
  --color-ui-rgb-inverse,
  --tone-lead,
  --tone-support,
  --tone-info,
  --tone-success,
  --tone-warning,
  --tone-alert,
  --tone-light,
  --tone-dark,
  --tone-contrast,
] from "./project.st.css";

@st-import Button from "../Button/button.st.css";
@st-import ButtonGroup from "../Button/buttonGroup.st.css";
@st-import [ --seperator-color ]from "./buttonGroup.st.css";
@st-import Icon from "../Icon/icon.st.css";
@st-import [visuallyHidden] from "./mixins/visuallyHidden.st.css";
@st-import [hideWebkitAppearance] from "./mixins/formElements.st.css";
@st-import [textVol] from "./mixins/textVol.st.css";
@st-import [pseudoFocus, pseudoFocusVisible] from "./mixins/focus.st.css";

@st-scope body {

  Button {
    /* = Local vars. */
    --bg-color: transparent;
    --border-color: transparent;
    --text-color: inherit;
    --border-radius: var(--button-radius);
    --border-width: var(--button-border-width);
    /* We assign --tone via our :variant(x) and then set it with our :tone(x). */
    --tone: initial;
    -st-mixin: hideWebkitAppearance;
    display: inline-flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
    margin: 0;
    padding: 0.2em 1em;
    /* = opinionated, only do if you are willing to provide replacement. */
    outline: none;
    cursor: pointer;
    /* = Persist border to maintain alignment should accross visual states. */
    border-style: solid;
    border-width: var(--border-width);
    border-radius: var(--border-radius);
    border-color: var(--border-color);
    background-color: var(--bg-color);
    color: var(--text-color);
    /* = Explicitly set font-family else it will default to system style. */
    font-family: inherit;
    font-weight: 500;
    text-transform: uppercase;
    /* transition: opacity 0.3s ease, background-color 0.3s ease, color 0.3s ease; */
    -webkit-font-smoothing: antialiased;
  }

  Button:is(a) {
    text-decoration: none;
  }

  Button:isCta {
    --border-radius: 999em;
    padding: 0.4em 2em;
  }

  Button:isCompact {
    padding-left: 1.5em;
    padding-right: 1.5em;
  }

  /* = Inner <span> */
  Button::inner {
    position: relative;
    text-wrap: nowrap;
    padding-top: 0.58em;
    padding-bottom: 0.55em;
  }

  /* = Divider - <span> */
  Button::divider {
    display: inline-block;
    width: 1em;
    line-height: 0;
  }

  Button Icon {
    /* Ensure the icon sits on top of the pseudo hover element. */
    position: relative;
    /* = Correct rounding issues on the svgs when they / 2 due to the respScale. */
    font-size: calc(1em + 2px);
  }

  Button:hover {
    text-decoration: none;
  }

  /* Pseudo hover element. */
  Button::before {
    content: "";
    position: absolute;
    inset: calc(var(--border-width) * -1);
    pointer-events: none;
    transition: opacity 0.3s ease, background-color 0.3s ease;
    will-change: opacity, background-color;
    opacity: 0;
    border-radius: var(--border-radius);
    border-width: var(--border-width);
    background-color: rgba(var(--button-hover-rgb), 0.4);
  }

  Button:isPressed::before {
    background-color: rgba(var(--button-hover-rgb), 0.6);
  }

  Button:not(Button:isDisabled):hover::before {
    opacity: 1;
  }

  Button::after {
    -st-mixin: pseudoFocus;
    border-radius: var(--border-radius);
  }

  Button:isFocusVisible::after {
    -st-mixin: pseudoFocusVisible;
  }

  /* = Variants - Assign --tone. */

  /* = Variant: 'primary' */
  Button:variant(primary) {
    --bg-color: var(--tone);
    --text-color: var(--color-ui-inverse);
  }

  /* = Seperator color for when in a group. */
  ButtonGroup Button:variant(primary) {
    --seperator-color: rgba(var(--color-ui-rgb-inverse), 0.4);
  }

  /* = Variant: 'secondary' */
  Button:variant(secondary) {
    --border-color: var(--tone);
    --text-color: var(--tone);
    -webkit-font-smoothing: antialiased;
  }

  Button:variant(secondary)::before {
    background-color: var(--tone);
  }

  Button:variant(secondary):not(Button:isDisabled):hover::before {
    opacity: 0.15;
  }

  Button:variant(secondary):not(Button:isDisabled):isPressed:hover::before {
    opacity: 0.2;
  }

  /* = Variant: 'quiet' */
  Button:variant(quiet) {
    --text-color: var(--tone);
  }

  Button:variant(quiet)::before {
    background-color: var(--tone);
  }

  Button:variant(quiet):not(Button:isDisabled):hover::before {
    opacity: 0.15;
  }

  Button:variant(quiet):not(Button:isDisabled):isPressed:hover::before {
    opacity: 0.2;
  }

  /* = Seperator color for when in a group. */
  ButtonGroup Button:variant(quiet) {
    --seperator-color: var(--tone);
  }



  /* = Tones */
  Button:tone(lead) {
    --tone: var(--tone-lead);
  }

  Button:tone(support) {
    --tone: var(--tone-support);
  }

  Button:tone(info) {
    --tone: var(--tone-info);
  }

  Button:tone(success) {
    --tone: var(--tone-success);
  }

  Button:tone(warning) {
    --tone: var(--tone-warning);
  }

  Button:tone(alert) {
    --tone: var(--tone-alert);
  }

  Button:tone(light) {
    --tone: var(--tone-light);
  }

  Button:tone(light):variant(primary) {
    color: var(--dark-02);
  }

  Button:tone(dark) {
    --tone: var(--tone-dark);
  }

  Button:tone(dark):variant(primary) {
    color: var(--light-01)
  }

  Button:tone(contrast) {
    --tone: var(--tone-contrast);
  }

  Button:tone(contrast):variant(primary) {
    color: var(--color-ui-inverse);
  }

  /* = Disabled */
  Button:isDisabled,
  Button:isDisabled:hover,
  Button:isDisabled:focus,
  Button:isDisabled:active,
  Button:isDisabled:active:hover {
    opacity: 0.5;
  }

  Button:vol(1) {
    -st-mixin: textVol(minValue 0.67, maxValue 0.675, lineHeight 1);
  }

  Button:vol(2) {
    -st-mixin: textVol(minValue 0.75, maxValue 0.71, lineHeight 1);
  }

  Button:vol(3) {
    -st-mixin: textVol(minValue 0.8, maxValue 0.78);
  }

  Button:vol(4) {
    -st-mixin: textVol(minValue 0.85, maxValue .875, lineHeight 1.1);
  }

  Button:vol(5) {
    -st-mixin: textVol(minValue 1, maxValue 1, lineHeight 1.2);
  }

  Button:vol(6) {
    -st-mixin: textVol(minValue 1.15, maxValue 1.125, lineHeight 1.15);
  }

  Button:vol(1) Icon {
    font-size: 12px;
  }

  Button:vol(2) Icon {
    font-size: 14px;
  }

  Button:vol(3) Icon {
    font-size: 16px;
  }

  Button:vol(4) Icon {
    font-size: 18px;
  }

  Button:vol(5) Icon {
    font-size: 20px;
  }

  Button:vol(6) Icon {
    font-size: 22px;
  }


  /*= Icon Positions */

  /* top */
  Button:iconPos(top) {
    flex-direction: column;
  }

  /* end / right */
  Button:iconPos(end) {
    flex-direction: row;
  }

  /* bottom */
  Button:iconPos(bottom) {
    flex-direction: column-reverse;
  }

  /* start / left */
  Button:iconPos(start) {
    flex-direction: row-reverse;
  }

  Button:fullWidth {
    width: 100%;
  }
}
