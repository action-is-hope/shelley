/**
 * Project - Default
 * 
 * Our main project which is essentially a theme but it itself can have themes
 * so project seems more appropriate. 
 */

@namespace "Default";

:import {
  -st-from: "./formatters/common";
  -st-named: multiply, divide, respScale;
}

/*=== BUILD-TIME 'VARIABLE' DEFINITIONS ===*/

:vars {

  /*=== LAYOUT AND GRID ===*/

  /** Breakpoints */
  --breakpoint-xs: 0;
  --breakpoint-sm: 568px;
  --breakpoint-md: 950px;
  --breakpoint-lg: 1200px;
  --breakpoint-xl: 1600px;
  --breakpoint-xxl: 1800px;

  /** Spacing */
  --spacing-unit: 0.69231rem;
  /* 18px when at 1800px */

  /** Grid */
  --grid-gap-xs: 12px;
  --grid-gap-md: 24px;
  /* This is a calc that will give you mobile column width. */
  --grid-base-column-width-sm: calc((100vw - 24px - (13 * 12px)) / 12);
  --grid-base-column-width-md: 4.011vw;
  /* Base grid-template-column values for the 14 column grid, 2 columns are auto and we have 12 that make up the main working area. */
  --grid-template-columns-base-sm: [full-bleed-start] 12px [outset-start content-start] repeat(12, 1fr) [content-end outset-end] 12px [full-bleed-end];
  --grid-template-columns-base-md: [full-bleed-start] auto [outset-start] repeat(2, minmax(0, 4.011vw)) [content-start] repeat(8, minmax(0, 4.011vw)) [content-end] repeat(2, minmax(0, 4.011vw)) [outset-end] auto [full-bleed-end];
  /* When we use the grid inside a grid we want to define the columns iniside above grid rule. So use this when using a grid inside a container */
  --grid-template-columns-base-content-start-end: repeat(12, minmax(0, 4.011vw));


  /*=== TYPE AND TEXT ===*/

  /** Fonts */
  --font-plain: Helvetica Neue, Helvetica, Arial, sans-serif;
  --font-special: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  --font-mono: Menlo, Courier, Courier New, Andale Mono, monospace;

  /* Base font min is 1em (16px) and max (20px) is 1.25em */
  --font-base-min: 1em;
  --font-base-max: 1.25em;

  /**
   * Scales - https://type-scale.com/
   *
   * We use these as ratios to bump up our text from one lebvel to the next.
   * Shelley likes to mix it up so we pulled in a bunch of these.
   */
  --minor-second: 1.067;
  --major-second: 1.125;
  --minor-third: 1.2;
  --major-third: 1.25;
  --perfect-forth: 1.333;

  /**
   * Volumes / Text sizes
   *
   * Are you ready for some serious over engineering? :-)
   *
   * Modular scale tutorial: https://www.smashingmagazine.com/2016/05/fluid-typography/
   *
   * Still with us? Now have a little gander at the variables we are setting for 
   * our text volumes below this comment block.
   *
   * You will notice each text size is comprised of three values:
   *
   * - min: The minimum font size, this is the font size we want at our smallest 
   *   expected screen size, 320px, 16px for us. We use this number as an input to our crazy 
   *   modular fluid text CSS formula thingy that we found. It's cool. We 
   *   can also use this number to set a CSS lock (https://css-tricks.com/css-locks/)
   *   if we are concerned that the font might get to small... Watch maybe?
   * 
   * - max: The maximum font size, this is the font size we want at whatever screen size you
   *   like, I think we chose 1800px. So when the browser is 1800px wide then I want the
   *   text to be... 20px in our case. We also this number as an input to our crazy 
   *   stolen formula.
   *
   * - scale: This is the font size we use in between the range 320px - 1800px. This
   *   is the dynamic font-size that is always changing when the browser is winging 
   *   around the 320px-1800px zone. If we din't have the CSS lock then it would just 
   *   get bigger and bigger. This is the output of the crazyness. 
   * 
   *   The scale magically (read the article or just go with it) gives you back a value
   *   that looks like this: calc(1em + 0.25 * ((100vw - 20em) / (92.5)))
   *
   *   So the browser looks at that and goes, "Right! Got it! 16px at 320px wide, 20px 
   *   at 1800px wide and everything in between I will scale make floaty and fluid, 
   *   ahhhhhhh all is well with the world.... Zen..."
   *
   *   Just to confuse you more Shelley has this all set in em values, so that made no 
   *   sense but we like to add to the mystery. Here is how that works out:
   *   20em = 320px
   *   92.5em = 1800px
   *   1em = 16px
   *   1.25em = 20px
   *
   *   But wait... there is more...
   *   
   *   calc(1em + 0.25 * ((100vw - 20em) / (92.5)))
   *45px @ 2000 
   *   and once you have wrapped you head around all of that and understand it, you 
   *   know CSS fundermentals quite well. Fun isn't it? I have no hair, #justSaying.
   *
   *   Shelley loves it.
   *
   *   Thanks and pops for the hard work and innovators:
   *   - https://www.smashingmagazine.com/2016/05/fluid-typography/
   *   - https://type-scale.com/ 
   *   - https://css-tricks.com/css-locks/
   * 
   */

  /* Volume 1 */
  --text-vol-1-min: divide(value(--font-base-min), value(--major-second), value(--major-second));
  --text-vol-1-max: divide(value(--font-base-max), value(--major-third), value(--minor-second));
  --text-vol-1-scale: respScale(value(--text-vol-1-min), value(--text-vol-1-max));
  --text-vol-1-line-height: 1.45;

  /* Volume 2 */
  --text-vol-2-min: divide(value(--font-base-min), value(--major-second));
  --text-vol-2-max: divide(value(--font-base-max), value(--minor-third));
  --text-vol-2-scale: respScale(value(--text-vol-2-min), value(--text-vol-2-max));
  --text-vol-2-line-height: 1.65;

  /* Volume 3 - The base */
  --text-vol-3-min: value(--font-base-min);
  --text-vol-3-max: value(--font-base-max);
  --text-vol-3-scale: respScale(value(--font-base-min), value(--font-base-max));
  --text-vol-3-line-height: 1.8;

  /* Volume 4 */
  --text-vol-4-min: multiply(value(--font-base-min), value(--major-second));
  --text-vol-4-max: multiply(value(--font-base-max), value(--major-third));
  --text-vol-4-scale: respScale(value(--text-vol-4-min), value(--text-vol-4-max));
  --text-vol-4-line-height: 1.45;

  /* Volume 5 */
  --text-vol-5-min: multiply(value(--font-base-min), value(--major-second), value(--minor-third));
  --text-vol-5-max: multiply(value(--font-base-max), value(--major-third), value(--perfect-forth));
  --text-vol-5-scale: respScale(value(--text-vol-5-min), value(--text-vol-5-max));
  --text-vol-5-line-height: 1.4;

  /* Volume 6 */
  --text-vol-6-min: multiply(value(--font-base-min), value(--major-second), value(--major-second), value(--minor-third));
  --text-vol-6-max: multiply(value(--font-base-max), value(--major-third), value(--major-third), value(--perfect-forth));
  --text-vol-6-scale: respScale(value(--text-vol-6-min), value(--text-vol-6-max));
  --text-vol-6-line-height: 1.3;

  /* Volume 7 */
  --text-vol-7-min: multiply(value(--font-base-min), value(--major-second), value(--major-second), value(--major-second), value(--major-third));
  --text-vol-7-max: multiply(value(--font-base-max), value(--major-third), value(--major-third), value(--perfect-forth), value(--perfect-forth));
  --text-vol-7-scale: respScale(value(--text-vol-7-min), value(--text-vol-7-max));
  --text-vol-7-line-height: 1.15;

  /* Volume 8 */
  --text-vol-8-min: multiply(value(--font-base-min), value(--major-second), value(--major-second), value(--major-second), value(--major-third), value(--major-third));
  --text-vol-8-max: multiply(value(--font-base-max), value(--major-third), value(--major-third), value(--perfect-forth), value(--perfect-forth), value(--perfect-forth));
  --text-vol-8-scale: respScale(value(--text-vol-8-min), value(--text-vol-8-max));
  --text-vol-8-line-height: 1.1;

  /* Volume 9 */
  --text-vol-9-min: multiply(value(--font-base-min), value(--major-second), value(--major-second), value(--major-second), value(--major-third), value(--major-third), value(--major-third));
  --text-vol-9-max: multiply(value(--font-base-max), value(--major-third), value(--major-third), value(--perfect-forth), value(--perfect-forth), value(--perfect-forth), value(--perfect-forth));
  --text-vol-9-scale: respScale(value(--text-vol-9-min), value(--text-vol-9-max));
  --text-vol-9-line-height: 1.05;

  /* Volume 10 */
  --text-vol-10-min: multiply(value(--font-base-min), value(--major-second), value(--major-second), value(--major-second), value(--major-second), value(--major-third), value(--major-third), value(--major-third));
  --text-vol-10-max: multiply(value(--font-base-max), value(--major-third), value(--major-third), value(--major-third), value(--major-third), value(--perfect-forth), value(--perfect-forth), value(--perfect-forth));
  --text-vol-10-scale: respScale(value(--text-vol-10-min), value(--text-vol-10-max));
  --text-vol-10-line-height: 1.05;

  /* Volume 11 */
  --text-vol-11-min: multiply(value(--font-base-min), value(--major-second), value(--major-second), value(--major-second), value(--major-third), value(--major-third), value(--major-third), value(--major-third), value(--major-third));
  --text-vol-11-max: multiply(value(--font-base-max), value(--major-third), value(--major-third), value(--major-third), value(--perfect-forth), value(--perfect-forth), value(--perfect-forth), value(--perfect-forth), value(--perfect-forth));
  --text-vol-11-scale: respScale(value(--text-vol-11-min), value(--text-vol-11-max));
  --text-vol-11-line-height: 1.05;

  /*=== COLOURS - The Queens English darling... ===*/

  /* Core light forground. */
  --light-01-raw: 255, 255, 255;
  --light-01: rgb(value(--light-01-raw));
  /* Core dark forground. */
  --dark-01-raw: 51, 51, 51;
  --dark-01: rgb(value(--dark-01-raw));

  /* Default site values which will be used for the fallbacks. */
  /* --color-accent-1-default: rgb(14, 97, 148);  */
  /* --color-accent-1-default: rgb(83, 180, 218); */
  --color-accent-1-default: #65bfff;

  /* rgb(83, 180, 218) */
  --color-accent-2-default: #52fba7;
  --color-accent-3-default: #ea91ff;
  --color-accent-4-default: #f7e1b9;

  --color-background-1-default: rgb(23, 26, 35);
  --color-background-2-default: rgba(0, 0, 0, 0.4);
  --color-background-3-default: rgba(255, 255, 255, 0.15);
  --color-background-4-default: rgba(255, 255, 255, 0.15);
  --color-background-modal-default: rgba(23, 26, 35, 0.98);
  --color-text-1-default: value(--light-01);
  --color-text-2-default: rgba(value(--light-01-raw), 0.9);
  --color-text-3-default: rgba(value(--light-01-raw), 0.8);
  --color-text-4-default: rgba(value(--light-01-raw), 0.6);
  --color-status-error-default: #b66b6e;
  --color-status-warn-default: orange;
  --color-status-neutral-default: blue;
  --color-status-success-default: green;
  --color-ui-default: value(--light-01);
  /* rgb(212, 212, 212) */
  --color-ui-default-raw: value(--light-01-raw);
}

/*=== GLOBAL CSS ===*/

/*=== SET CSS RUN-TIME VARIABLES ===*/

/**
 * Default color scheme variables
 * 
 * We make use of the Stylable build variables and map them to equivalent CSS 
 * runtime variables. This allows us to the -default version as our fallback,
 * it is a little confusing at first so keep checking your browser list.
 */

:root {
  --color-accent-1: value(--color-accent-1-default);
  --color-accent-2: value(--color-accent-2-default);
  --color-accent-3: value(--color-accent-3-default);
  --color-accent-4: value(--color-accent-4-default);
  --color-background-1: value(--color-background-1-default);
  --color-background-2: value(--color-background-2-default);
  --color-background-3: value(--color-background-3-default);
  --color-background-4: value(--color-background-4-default);
  --color-background-modal: value(--color-background-modal-default);
  --color-text-1: value(--color-text-1-default);
  --color-text-2: value(--color-text-2-default);
  --color-text-3: value(--color-text-3-default);
  --color-text-4: value(--color-text-4-default);
  --color-status-error: value(--color-status-error-default);
  --color-status-warn: value(--color-status-warn-default);
  --color-status-neutral: value(--color-status-neutral-default);
  --color-status-success: value(--color-status-success-default);
  --color-ui: value(--color-ui-default);
  --color-ui-raw: value(--color-ui-default-raw);
}


/**
 * Alternate colour scheme variables
 *
 * These are our alternate color schemes, you can map them from build-time 
 * variables if you are sharing lots but it tend to get confusing for us.
 * Try to stay organised.
 */

@media (prefers-color-scheme: light) {
  .root {
    /* Override our CSS runtime variables, if our user prefers it light as a feather. */
    --color-accent-1: rgb(22, 141, 217);
    --color-accent-2: rgb(35, 196, 141);
    --color-background-1: rgb(242, 243, 255);
    /*rgb(249, 249, 249);*/
    --color-background-2: rgb(255, 255, 255);
    --color-background-3: rgba(0, 0, 0, 0.15);
    --color-background-4: rgb(255, 255, 255);
    --color-background-modal: rgba(249, 249, 249, 0.98);
    --color-text-1: value(--dark-01);
    --color-text-2: rgba(value(--dark-01-raw), 0.9);
    --color-text-3: rgba(value(--dark-01-raw), 0.8);
    --color-text-4: rgba(value(--dark-01-raw), 0.6);
    --color-status-error: red;
    --color-status-warn: orange;
    --color-status-neutral: blue;
    --color-status-success: green;
    --color-ui: value(--dark-01);
    --color-ui-raw: value(--dark-01-raw);
  }
}

/*=== GLOBAL CSS ===*/

/** 
 * This ideally will just be a spinkling of higher level styles that use 
 * variables. For the reset globals we set them in ./css/allGlobals.st.css 
 * which is pulled in within index.ts */
.root {
  font-family: value(--font-plain);
  font-size: 100%;
  /* font-weight: 200; */
  /* line-height: value(--ratio); */
  min-height: 100vh;
}

/* Give ourselves a fluid rem value to use for padding or whatever. */
html {
  -webkit-text-size-adjust: 100%;
}

@supports (display: grid) {
  html {
    font-size: value(--text-vol-3-scale);
    font-size: calc(1em + 0.45 * ((100vw - 20em) / (92.5)));
    font-size: calc(1em + 0.625 * ((100vw - 20em) / (92.5)))
  }

  @media screen and (min-width: 1800px) {
    html {
      /* font-size: value(--text-vol-3-max); */
      font-size: 26px;
    }
  }
}

/* 1em + 0.625 */
/* calc(1em + 0.625 * ((100vw - 20em) / (92.5)))
25.9392 */


body {
  /**
   * Sets the body back to browser defaults.
   * Why? Using rem for everything means we can't set a container to say 
   * font-size: 90% to tweak the size of the contained elements as they would 
   * always size off the root html element.
   *
   * This way we can use a responsive rem value when we want to but also 
   * leverage ems as described above.
   */
  font-size: initial;
  color: value(--color-ui-default);
  color: var(--color-ui, value(--color-ui-default));


  background-color: value(--color-background-1-default);
  background-color: var(--color-background-1, value(--color-background-1-default));

  /* background: linear-gradient(-45deg, rgb(3, 116, 156) 0%, rgb(25, 41, 66) 100%) 0% 0% / 150% 150% */
  /* background: linear-gradient(-45deg, #09351f 0%, rgb(25, 41, 66) 100%) 0% 0% / 150% 150%; */
  /* background: linear-gradient(-45deg, rgb(16, 10, 86) 0%, rgb(43, 40, 43) 100%) 0% 0% / 150% 150%; */

  /* background: linear-gradient(-45deg, rgb(3, 116, 156) 0%, rgb(25, 41, 66) 100%) 0% 0% / 150% 150%;
  background: linear-gradient(-45deg, #09351f 0%, rgb(25, 41, 66) 100%) 0% 0% / 150% 150%; */
}

hr {
  width: 16vw;
  height: 1px;
  margin: 48px auto;
  background: var(--color-ui)
}
