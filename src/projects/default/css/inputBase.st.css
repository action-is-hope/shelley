/** InputBase.st.css */

/* project and vars */
:import {
  -st-from: "../project.st.css";
  -st-default: Default;
  -st-named:
    --spacing-unit,
    --color-ui-default;
}

:import {
  -st-from: "../../../components/InputBase/inputBase.st.css";
  -st-default: InputBase;
  -st-named: fieldInput
}

:import {
  -st-from: "../../../components/Label/label.st.css";
  -st-default: InputLabel;
}

:import {
  -st-from: "../../../components/HintText/hintText.st.css";
  -st-default: HintText;
}

:import {
  -st-from: "../../../components/ErrorText/errorText.st.css";
  -st-default: ErrorText;
}

:import {
  -st-from: "../../../components/InputAdornment/inputAdornment.st.css";
  -st-default: Adornment;
}

:import {
  -st-from: './formElements.st.css';
  -st-named:
    hideWebkitAppearance,
    textInput,
    inputVol1,
    inputVol2,
    inputVol3,
    inputVol4,
    inputVol5,
    inputVol6;
}

@st-scope Default {

  /*==== BASE ====*/

  InputBase {
    /* 
      Showing the error before the field in question is the most logical but in 
      practice we want to render it below so as to avoid the field moving when
      it is in an eror state. We are using flex to move the error but you could 
      use grid with named grid-lines but wider support exists ofr flex so less 
      fallbacks are required.
    */
    display: flex;
    flex-direction: column;
  }

  InputBase InputLabel {
    /* order: 1; */
  }

  InputBase::fieldContainer {
    position: relative;
    display: inline-flex;
    color: value(--color-ui-default);
    line-height: 1.5;
  }

  /* Indicator */
  InputBase::fieldContainer::before {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    display: block;
    content: "";
    width: 1px;
    background-color: #33d25f45;
    background-color: rgba(189, 228, 254, 0.5);
    /* 50% of the blue tint for form elemets... */
    transition: background-color 0.3s;
  }

  /* Native input*/
  InputBase::fieldInput {
    -st-mixin:
      hideWebkitAppearance,
      textInput;
    padding-left: value(--spacing-unit);
    padding-right: value(--spacing-unit);
  }

  /* Use a named import as a class to get the adjacent selectors working. */
  InputBase Adornment+.fieldInput,
  InputBase::fieldInput+Adornment {
    margin-left: calc(-.2rem - value(--spacing-unit));
  }

  InputBase HintText {
    margin-top: calc(value(--spacing-unit) / 2)
  }

  InputBase ErrorText {
    /* Send the error message which is first in the source order to appear under the form input. */
    order: 3;
    border-left-width: 1px;
    padding: 8px value(--spacing-unit) 0 value(--spacing-unit);

  }

  /* Textarea wrapper which can be used for scrolling. */
  InputBase::textAreaWrap {
    display: block;
    width: 100%;
  }


  /*==== STATES ====*/

  /* Error */
  InputBase:error::fieldContainer::before {
    background-color: #b66b6e;
  }

  /* Disabled */
  InputBase:disabled {
    filter: saturate(15%) brightness(70%);
  }

  InputBase:disabled::fieldInput {
    cursor: not-allowed;
  }

  /* Focused */
  InputBase::fieldContainer:focus-within::before {
    background-color: #09b1f1;
  }

  /* Hack to get rid of the bloody autofill bg - https://webagility.com/posts/the-ultimate-list-of-hacks-for-chromes-forced-yellow-background-on-autocompleted-inputs */
  InputBase::fieldInput:-webkit-autofill,
  InputBase::fieldInput:-webkit-autofill:hover,
  InputBase::fieldInput:-webkit-autofill:focus,
  InputBase::fieldInput:-webkit-autofill:active {
    -webkit-transition-delay: 99999s;
  }

  /*==== VOLUMES ====*/

  /* Volume 1 */
  InputBase.vol1 {
    -st-mixin: inputVol1
  }

  /* Volume 2 */
  InputBase.vol2 {
    -st-mixin: inputVol2;
  }

  /* Volume 3 */
  InputBase.vol3 {
    -st-mixin: inputVol3
  }

  /* Volume 4 */
  InputBase.vol4 {
    -st-mixin: inputVol4
  }

  /* Volume 5 */
  InputBase.vol5 {
    -st-mixin: inputVol5
  }

  /* Volume 6 */
  InputBase.vol6 {
    -st-mixin: inputVol6
  }



  /*==== VARIANTS ====*/

  /* Variant 1 - "Body" */
  InputBase.variant1 InputLabel {
    margin-bottom: value(--spacing-unit);
  }

  InputBase.variant1::fieldInput {
    /* padding: calc(0.2rem + .2em) 16px; */
  }

  InputBase.variant1+InputBase.variant1 {
    margin-top: calc(value(--spacing-unit) * 1)
  }


  /* Variant 2 - "Data" */


  InputBase.variant2 {
    display: grid;
    grid-template-columns: 1fr 2fr;
    grid-column-gap: value(--spacing-unit);
    background: rgba(255, 255, 255, 0.04);
  }

  InputBase.variant2 InputLabel {
    order: initial;
  }

  InputBase.variant2::fieldInput {
    padding-top: calc(0.2rem + .58em);
    padding-bottom: calc(0.2rem + .58em);
  }

  InputBase.variant2 ErrorText {
    grid-column: 2;
    padding-top: 4px;
    padding-bottom: 8px;
  }

  InputBase.variant2 InputLabel {
    margin-bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-end;
  }

  InputBase.variant2 InputLabel::labelTextContainer {
    padding-top: 16px;
    padding-bottom: 16px;
  }

  InputBase.variant2 InputLabel::labelText {
    text-align: end;
  }

}
