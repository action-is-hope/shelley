/**
 * = GRID - grid.st.css 
 *
 * Our main grid styles live here, you maybe tempted to make add a load of
 * utilities that configure your grid in a load of ways... Be warned that having
 * too much layout specified with the markup via props/classnames is a real pain 
 * when you are trying to make changes to a page full of grids. Opinion.
 * 
 * ========================================================================= */

:import {
  -st-from: "../project.st.css";
  -st-default: Default;
  -st-named:
    spacing-unit,
    breakpoint-sm,
    breakpoint-md,
    breakpoint-lg,
    breakpoint-xl,
    breakpoint-xxl,
    grid-gap-xs,
    grid-gap-md,
    --grid-template-columns-base-sm,
    --grid-template-columns-base-md,
    --grid-template-columns-base-mid-start-end
}

:import {
  -st-from: "../../../components/Grid/grid.st.css";
  -st-default: Grid;
}

:import {
  -st-from: './mixins/gridItem.st.css';
  -st-named:
    gridItem,
    gridItemReset;
}

:import {
  -st-from: './utils.st.css';
  -st-named:
    formatted,
    clearfix;
}

@st-scope Default {

  Grid {
    grid-gap: 3vw;
  }

  /* = IE Fallback for images only on nested grids? */
  Grid>Grid {
    text-align: center;
  }

  /* = Reset children else they will inherit the text-align. */
  Grid>Grid>* {
    text-align: initial;
  }

  /* = Reset for grid. */
  @supports (display: grid) {
    Grid>Grid {
      text-align: initial;
    }
  }

  /* = Hook up the formatting styles to this prop. */
  Grid:formatted {
    -st-mixin: formatted;
  }

  /* = Variant 1: Core Grid */

  /* = See grid docs on shelley.earth for initial walkthrough. */
  Grid.variant1 {
    display: grid;
    grid-row-gap: 0;
    grid-template-columns:
      [edge-start] auto [goal-start pen-start] 0 0 [mid-start] 8.75rem [half] 8.75rem [mid-end] 0 0 [pen-end goal-end] auto [edge-end];
  }

  /* = width tweaks and seperating 'pen' from 'goal' for sm and above. */
  @media value(breakpoint-sm) {
    Grid.variant1 {
      grid-template-columns:
        [edge-start] auto [goal-start] 3vw 3vw [pen-start] 3vw [mid-start] 9rem [half] 9rem [mid-end] 3vw [pen-end] 3vw 3vw [goal-end] auto [edge-end];
    }
  }

  /* = width tweaks for md and above. */
  @media value(breakpoint-md) {
    Grid.variant1 {
      grid-template-columns:
        [edge-start] auto [goal-start] 4vw 4vw [pen-start] 4vw [mid-start] 11.75rem [half] 11.75rem [mid-end] 4vw [pen-end] 4vw 4vw [goal-end] auto [edge-end];
    }
  }

  /* = Set any direct descendant Grid on the 'goal' grid lines. */
  /* Grid.variant1>Grid {
    grid-column: goal;
  } */


  /* = Set direct descendant Grid variant1 to 'edge' grid lines. */
  Grid.variant1>Grid.variant1 {
    grid-column: edge;
  }
}

/* = Columms: Align common grid items, including fallback styles. */

/* = @todo: #stylable These are outside of @st-scope XXX {) due to a bug with 
 *  stylable where only the first item gets the scope prefix. */
Grid.variant1>h1,
Grid.variant1>h2,
Grid.variant1>h3,
Grid.variant1>h4,
Grid.variant1>h5,
Grid.variant1>h6,
Grid.variant1>p,
Grid.variant1>ul,
Grid.variant1>ol,
Grid.variant1>dl,
Grid.variant1>blockquote,
Grid.variant1>pre,
Grid.variant1>img,
Grid.variant1>figure {
  -st-mixin: gridItem;
}

/* = If you need to jump these based on media query then do it with a custom class. */
Grid.variant1>.mid {
  -st-mixin: gridItem;
}

Grid.variant1>.pen {
  -st-mixin: gridItem(gridCol pen, fallbackMaxWidth 50rem);
}

Grid.variant1>.goal {
  -st-mixin: gridItem(gridCol goal, fallbackMaxWidth 85%);
}

Grid.variant1>.edge {
  -st-mixin: gridItem(gridCol edge, fallbackMaxWidth 100%);
}

/* = Common jump patterns, you can set these up like a bootstrap grid if you like 
littering your HTML with conditional positional info*/
Grid.variant1>.snapMidToGoal {
  grid-column: mid;
}

@media value(breakpoint-md) {
  Grid.variant1>.snapMidToGoal {
    -st-mixin: gridItem(gridCol goal, fallbackMaxWidth 85%);
  }
}

/* = @todo: This should be able to move to the gridItem mixin, if stylable bug confirmed. */
@supports (display: grid) {

  Grid.variant1>h1,
  Grid.variant1>h2,
  Grid.variant1>h3,
  Grid.variant1>h4,
  Grid.variant1>h5,
  Grid.variant1>h6,
  Grid.variant1>p,
  Grid.variant1>ul,
  Grid.variant1>ol,
  Grid.variant1>dl,
  Grid.variant1>blockquote,
  Grid.variant1>pre,
  Grid.variant1>img,
  Grid.variant1>figure,
  Grid.variant1>.snapMidToGoal {
    -st-mixin: gridItemReset;
  }

  Grid.variant1>.mid {
    -st-mixin: gridItemReset;
  }

  Grid.variant1>.pen {
    -st-mixin: gridItemReset;
  }

  Grid.variant1>.goal {
    -st-mixin: gridItemReset;
  }

  Grid.variant1>.edge {
    -st-mixin: gridItemReset;
  }

  /* = end */

  /** 
   * = Other grid variants
   *
   * One might call these our 'subgrids' as we usually will use them as children
   * of the main grid, variant 1. 
   * 
   * When to add a new variant/subgrid? Not straightway?? maybe after you use it
   * on more than one component, you don't really want a variant with just one 
   * usage and in custom cases you migth use use some variables to build up a grid
   * within a component CSS insteads. I think commony used patterns are fine, especially
   * ones with a well defined responsive rules including fallback.
   *
   * You might like to use one as the basis of a custom style leveraging the fallback 
   * but then overiding grid-template-columns with something else.
   */


  /* = Variant 2: 1 | 1 */
  Grid.variant2 {
    -st-mixin: clearfix;
    grid-template-columns: [edge-start] auto [goal-start pen-start] 0 0 [mid-start] 8.75rem [half] 8.75rem [mid-end] 0 0 [pen-end goal-end] auto [edge-end];

    grid-column: mid;
  }

  @media value(breakpoint-md) {
    Grid.variant2 {
      grid-column: goal;
      display: grid;
      grid-template-columns: 1fr 1fr;

    }

    /* = Fallbacks: Just because a browser is old doesn't mean it is stupid, calc is useful. */
    Grid.variant2>* {
      width: calc(50% - 1.5vw);
    }

    Grid.variant2>*:nth-child(odd) {
      float: left;
      /* = rtl*/
    }

    Grid.variant2>*:nth-child(even) {
      float: right;
      /* = rtl*/
    }

    /* = Reset fallback styles: no need for floats as they loose 'rock paper scissors' to grid in terms of layout. */
    @supports (display: grid) {
      Grid.variant2>* {
        width: initial;
      }
    }
  }




  /* = Variant 3: 7 | 5 */
  Grid.variant3 {
    display: grid;
    grid-column: goal;
  }

  @media value(breakpoint-sm) {
    Grid.variant3 {
      -st-mixin: clearfix;
    }

    Grid.variant3 {
      grid-template-columns: 7fr 5fr;
    }
  }
}


.mt1 {
  margin-top: calc(value(spacing-unit) * 4)
}

.mb1 {
  margin-bottom: calc(value(spacing-unit) * 4)
}

.mt2 {
  margin-top: calc(value(spacing-unit) * 8)
}

.mb2 {
  margin-bottom: calc(value(spacing-unit) * 8)
}

.mtAuto {
  margin-top: auto;
}
