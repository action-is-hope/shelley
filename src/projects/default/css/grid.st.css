/** grid.st.css */

/* project and vars */
:import {
  -st-from: "../project.st.css";
  -st-default: Default;
  -st-named:
    spacing-unit,
    breakpoint-sm,
    breakpoint-md,
    breakpoint-lg,
    breakpoint-xl,
    breakpoint-xxl,
    grid-gap-xs,
    grid-gap-md,
    --grid-template-columns-base-sm,
    --grid-template-columns-base-md,
    --grid-template-columns-base-mid-start-end
}

:import {
  -st-from: "../../../components/Grid/grid.st.css";
  -st-default: Grid;
}

:import {
  -st-from: "../../../components/Text/text.st.css";
  -st-default: Text;
}

:import {
  -st-from: "../../../components/Blockquote/blockquote.st.css";
  -st-default: Blockquote;
}

:import {
  -st-from: "../../../components_site/CodeSample/codeSample.st.css";
  -st-default: CodeSample;
}

:vars {
  grid-col-sm-max: 4.6vw;
  grid-col-md-max: 6.1vw;
  /* lg not required. */
  grid-col-xl-max: 5.1vw;
}

@st-scope Default {
  .exampleBox {
    padding: 64px;
    padding-top: 54px;
    border: 1px dashed rgba(255, 255, 255, 0.13);
    margin-top: 48px;
    margin-bottom: 48px;
  }

  .mbSmall {
    margin-bottom: 2rem
  }

  Grid {
    display: grid;
    grid-gap: 3vw;
  }

  /* 
  Grid.variant1 {
    grid-template-columns:
      [edge-start goal-start] auto [pen-start] 4vw [mid-start] 9rem [half] 9rem [mid-end] 4vw [pen-end] auto [goal-end edge-end];
  }

  @media value(breakpoint-sm) {
    Grid.variant1 {
      grid-template-columns:
        [edge-start goal-start] auto [pen-start] 4vw [mid-start] 10rem [half] 10rem [mid-end] 4vw [pen-end] auto [goal-end edge-end];
    }
  }

  @media value(breakpoint-md) {
    Grid.variant1 {
      grid-template-columns:
        [edge-start] auto [goal-start] 4vw 4vw [pen-start] 4vw [mid-start] 11.75rem [half] 11.75rem [mid-end] 4vw [pen-end] 4vw 4vw [goal-end] auto [edge-end];
    }
  } */

  /* prefixed by https://autoprefixer.github.io (PostCSS: v7.0.26, autoprefixer: v9.7.3) */

  Grid {
    display: -ms-grid;
    display: grid;
    grid-gap: 3vw;
  }

  Grid.variant1 {
    -ms-grid-columns: auto 4vw 4vw 4vw 9rem 9rem 4vw 4vw 4vw auto;
    grid-template-columns:
      [edge-start goal-start] auto [pen-start] 4vw [mid-start] 9rem [half] 9rem [mid-end] 4vw [pen-end] auto [goal-end edge-end];
  }

  @media value(breakpoint-sm) {
    Grid.variant1 {
      -ms-grid-columns:
        auto 4vw 4vw 4vw 10rem 10rem 4vw 4vw 4vw auto;
      grid-template-columns:
        [edge-start goal-start] auto [pen-start] 4vw [mid-start] 10rem [half] 10rem [mid-end] 4vw [pen-end] auto [goal-end edge-end];
    }
  }

  @media value(breakpoint-md) {
    Grid.variant1 {
      -ms-grid-columns:
        auto 4vw 4vw 4vw 11.75rem 11.75rem 4vw 4vw 4vw auto;
      grid-template-columns:
        [edge-start] auto [goal-start] 4vw 4vw [pen-start] 4vw [mid-start] 11.75rem [half] 11.75rem [mid-end] 4vw [pen-end] 4vw 4vw [goal-end] auto [edge-end];
    }
  }


  /* When to add a new variant? Not straightway, maybe after you use it on more than one component, you don't really want a variant with just one usage.*/

  /* Any directly nested Grid components to be set on the 'container' grid lines by default. */
  Grid.variant1>Grid {
    grid-column: goal;
  }

  /* Any directed nested Grid components to be set on the 'container' grid lines by default. */
  Grid.variant1>Grid.variant1 {
    grid-column: edge;
  }

  /* variant1-md-cols: 4.6vw [pen-start] 4.6vw [mid-start] 12.5rem [half] 12.5rem [mid-end] 4.6vw [pen-end] 4.6vw; */
  /* variant1-xl-cols: repeat(2, 4.6vw) [pen-start] 4.6vw [mid-start] repeat(3, 4.6vw) [half] repeat(3, 4.6vw) [mid-end] 4.6vw [pen-end] repeat(2, 4.6vw); */
  /* variant1-xxl-cols: repeat(2, 4.6vw) [pen-start] 4.6vw 4.6vw [mid-start] repeat(2, 4.6vw) [half] repeat(2, 4.6vw) [mid-end] 4.6vw 4.6vw [pen-end] repeat(2, 4.6vw); */


  Grid.variant2 {
    grid-template-columns: 1fr 1fr 1fr;

  }

  Grid.variant2 {
    /* grid-gap: 3vw; */
    grid-template-columns: 1fr 1fr;
    /* grid-template-columns: [edge-start] auto [goal-start] repeat(2, minmax(0, 4.6vw)) [pen-start] repeat(2, minmax(0, 4.6vw)) [mid-start] repeat(2, minmax(0, 4.6vw)) [half] repeat(2, minmax(0, 4.6vw)) [mid-end] repeat(2, minmax(0, 4.6vw)) [pen-end] repeat(2, minmax(0, 4.6vw)) [goal-end] auto [edge-end]; */
  }
}




/** Mixin: Resets our non-grid CSS. */
:vars {
  fallbackMaxWidth: 100%;
}

.columFallback {
  margin-left: auto;
  margin-right: auto;
  max-width: value(fallbackMaxWidth);
}


/** Mixin: Resets our non-grid CSS. */
.columFallbackReset {
  margin-left: initial;
  margin-right: initial;
  max-width: initial;
}

/** Columms */

/* Align common grid items, including fallback styles. */
Grid.variant1>h1,
Grid.variant1>h2,
Grid.variant1>h3,
Grid.variant1>h4,
Grid.variant1>h5,
Grid.variant1>h6,
Grid.variant1>p,
Grid.variant1>ul,
Grid.variant1>ol,
Grid.variant1>dl,
Grid.variant1>blockquote,
Grid.variant1>pre,
Grid.variant1>img,
Grid.variant1>figure {
  /* fallback styles for mid-start / mid-end */
  -st-mixin: columFallback(fallbackMaxWidth 34rem);
  /* set the grid lines */
}



.touch {
  /* -st-mixin: columFallback; */
}

.goal {
  /* -st-mixin: columFallback(fallbackMaxWidth 85%); */
}

.pen {
  /* -st-mixin: columFallback(fallbackMaxWidth 45rem); */
}

.mid {
  /* -st-mixin: columFallback(fallbackMaxWidth 35rem); */
}


@st-scope Default {
  @supports (display: grid) {

    /**
   * Resetting the values used for the fallback. 
   * We could target these most with >Text but it is more specific thus more 
   * difficult to override should the need arise.
   */
    Grid.variant1>h1,
    Grid.variant1>h2,
    Grid.variant1>h3,
    Grid.variant1>h4,
    Grid.variant1>h5,
    Grid.variant1>h6,
    Grid.variant1>p,
    Grid.variant1>ul,
    Grid.variant1>ol,
    Grid.variant1>dl,
    Grid.variant1>blockquote,
    Grid.variant1>pre,
    Grid.variant1>img,
    Grid.variant1>figure {
      -st-mixin: columFallbackReset;
      grid-column: mid-start / mid-end;
    }
  }


  Grid .edge {
    /* -st-mixin: columFallbackReset; */
    -ms-grid-column: 1;
    -ms-grid-column-span: 10;
    /* 1 / span 10 */
    grid-column: edge;
  }

  Grid .goal {
    /* -st-mixin: columFallbackReset; */
    -ms-grid-column: 2;
    -ms-grid-column-span: 8;
    grid-column: goal;
    /* 2 / span 8 */
  }

  Grid .pen {
    /* -st-mixin: columFallbackReset; */
    -ms-grid-column: 4;
    -ms-grid-column-span: 4;
    grid-column: pen;
    /* 4 / span 4 */
  }

  Grid .mid {
    /* -st-mixin: columFallbackReset; */
    -ms-grid-column: 5;
    -ms-grid-column-span: 2;
    grid-column: mid;
    /* 5 / span 2 */
  }
}




.mt1 {
  margin-top: calc(value(spacing-unit) * 4)
}

.mb1 {
  margin-bottom: calc(value(spacing-unit) * 4)
}

.mt2 {
  margin-top: calc(value(spacing-unit) * 8)
}

.mb2 {
  margin-bottom: calc(value(spacing-unit) * 8)
}

.mtAuto {
  margin-top: auto;
}

/* .mtb1 {
    margin: calc(value(spacing-unit) * 4)
  } */


Grid:typographic>p+p,
Grid:typographic>p+h4,
Grid:typographic>p+h5,
Grid:typographic>h2+p,
Grid:typographic>h3+p,
Grid:typographic>h4+p,
Grid:typographic>h5+p,
Grid:typographic>h6+p,
Grid:typographic>h4+h5 {
  margin-top: calc(value(spacing-unit) * 2);
}



Grid:typographic>blockquote,
Grid:typographic>CodeSample {
  margin-top: calc(value(spacing-unit) * 4);
  margin-bottom: calc(value(spacing-unit) * 5);
  margin-bottom: 0;
}

Grid:typographic>h2+CodeSample {
  margin-top: calc(value(spacing-unit) * 2);
}

Grid:typographic>blockquote+Text,
Grid:typographic>CodeSample+Text {
  margin-top: calc(value(spacing-unit) * 6);
}

/* Grid:typographic>CodeSample:last-child {
  margin-bottom: 0;
} */

/* Grid:typographic>blockquote+p {
  margin-top: calc(value(spacing-unit) * 3);
} */

/* Grid:typographic>p+blockquote {
  margin-top: calc(value(spacing-unit) * 4);
}

Grid:typographic>blockquote+p {
  margin-top: calc(value(spacing-unit) * 3);
} */

Grid:typographic>p+h2 {
  margin-top: calc(value(spacing-unit) * 4);
}

/** Body styles */
Grid:typographic>p+Text.vol4 {
  margin-top: calc(value(spacing-unit) * 8);
}


Grid:typographic>p+h3,
Grid:typographic>h2+h3 {
  margin-top: calc(value(spacing-unit) * 4);
}

Grid:typographic>p+h6 {
  margin-top: calc(value(spacing-unit) * 2);
}

/* Grid:typographic>p {
    max-width: 37.8rem;
    1800 / 5.1
  } */

/* Grid>Text.uppercase {
    color: rgb(149, 239, 174)
  } */

/* maybe default with text spacing on...? the option to :disabled */

@st-scope Default {
  Grid.variant1 {
    grid-row-gap: 0;
  }
}

/* This is how we can scope the styles but we loose CSS syntax sugar. There is a ticket for that on the stylable-intelligence. */
@st-scope Default {}
