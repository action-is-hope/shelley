/** global.st.css */

:import {
  -st-from: "./project.st.css";
  -st-named: --text-vol-3-scale, --text-vol-3-min, --text-vol-3-max
}

/* Give ourselves a fluid rem value to use for padding or whatever. */
html {
  -webkit-text-size-adjust: 100%;
}

@supports (display: grid) {
  html {
    font-size: value(--text-vol-3-scale);
    font-size: calc(1em + 0.45 * ((100vw - 20em) / (92.5)));
    font-size: calc(1em + 0.625 * ((100vw - 20em) / (92.5)))
  }

  @media screen and (min-width: 1800px) {
    html {
      /* font-size: value(--text-vol-3-max); */
      font-size: 26px;
    }
  }
}

/* 1em + 0.625 */
/* calc(1em + 0.625 * ((100vw - 20em) / (92.5)))
25.9392 */



/**
 * Sets the body back to browser defaults.
 * Why? Using rem for everything means we can't set a container to say 
 * font-size: 90% to tweak the size of the contained elements as they would 
 * always size off the root html element.
 *
 * This way we can use a responsive rem value when we want to but also 
 * leverage ems as described above.
 */
body {
  font-size: initial;
}

*,
:after,
:before {
  box-sizing: border-box;
  font-family: inherit;
  color: inherit;
  overflow-wrap: break-word;
  margin: 0;
  padding: 0;
  border: 0 solid;
}

[hidden] {
  display: none;
}

[hidden]+* {
  margin-top: 0 !important;
}

footer,
header,
main,
nav {
  display: block;
}

/* We are resetting these so when we use the <Text vol={false}> we don't end up with the defaults. */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 1em
}
