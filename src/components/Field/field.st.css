/** field.st.css */
@st-import HelpText from "../HelpText/helpText.st.css";
@st-import InputLabel from "../Label/label.st.css";

@namespace "Field";

.root {
  -st-states:
    isRequired,
    isDisabled,
    isReadOnly,
    hasValue,
    error,
    variant(string),
    vol(number),
    disableLabelTransition,
    labelPosition(enum(top, side, over, hidden));
}

.root {
  display: grid;
  position: relative;
}

.inputLabel {
  -st-extends: InputLabel;
}

.fieldContainer {
  position: relative;
  display: inline-flex;
}

.startAdornment {}

.endAdornment {}

.textAreaWrap {}

.fieldInput {}

.helpText {
  -st-extends: HelpText;
}

/* Basic grid setup */
.root:labelPosition(top) {
  grid-template-columns: 1fr;
}

.root:labelPosition(side) {
  grid-template-columns: .35fr 1fr;
}

.root:labelPosition(side)::helpText {
  grid-area: 2 / 2;
}

.root:labelPosition(over) {
  grid-template-columns: 1fr;
}

.root:labelPosition(hidden) {
  grid-template-columns: 1fr;
}

/* Transition label... */
.fieldset {
  text-align: left;
  position: absolute;
  inset: -5px 0px 0px;
  margin: 0px;
  padding: 0px 8px;
  pointer-events: none;
  border-radius: inherit;
  border-style: solid;
  border-width: 1px;
  overflow: hidden;
  min-width: 0%;
}

.legend {
  float: unset;
  width: auto;
  overflow: hidden;
  display: block;
  padding: 0;
  height: 11px;
  font-size: 0.75em;
  visibility: hidden;
  max-width: 0.01px;
  white-space: nowrap;
  font-weight: 400;
}

.root:labelPosition(over):focus-within::legend,
.root:labelPosition(over):hasValue::legend {
  max-width: 100%;
  padding: 0 7px;
}

.root:labelPosition(over)::inputLabel {
  display: block;
  transform-origin: left top;
  position: absolute;
  left: 0;
  top: 0;

  /* @todo variable... for transition */
  transition: color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms, transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms, max-width 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
  z-index: 1;

  cursor: text;
  max-width: calc(100% - 3em);
}

.root:labelPosition(over)::inputLabel::labelText {
  display: block;
  transform-origin: 0;
  transition: transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.root:labelPosition(over):focus-within::inputLabel,
.root:labelPosition(over):hasValue::inputLabel {
  transform: translate(0, -10px);
}

.root:labelPosition(over):focus-within::inputLabel::labelText,
.root:labelPosition(over):hasValue::inputLabel::labelText {
  transform: scale(0.75);
}

.root:labelPosition(over)::fieldInput::placeholder,
.root:labelPosition(over)::fieldInput textarea::placeholder {
  transition: opacity 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
  opacity: 0;
}

.root:labelPosition(over)::fieldInput:focus::placeholder,
.root:labelPosition(over):hasValue::fieldInput::placeholder,
.root:labelPosition(over)::fieldInput textarea:focus::placeholder,
.root:labelPosition(over):hasValue::fieldInput textarea::placeholder {
  opacity: 1;
}
