/* buttonGroup.st.css */
@namespace "ButtonGroup";
/* = import Button component to style as child. */
@st-import Button from "../Button/button.st.css";

.root {
  -st-states:
    orientation(enum(horizontal, vertical)),
    fullWidth,
    splitButton,
    isDisabled;
  --seperator-color: initial;
  --seperator-width: 1px
}

.root {
  display: inline-flex;
}

.root > Button:focus {
  z-index: 1;
}

/* Styles if `orientation="horizontal"`. */
.root:splitButton:orientation(horizontal) > Button:not(:first-child),
.root:splitButton:orientation(horizontal) > Button:not(:first-child)::after {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.root:splitButton:orientation(horizontal) > Button:not(:last-child),
.root:splitButton:orientation(horizontal) > Button:not(:last-child)::after {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.root:splitButton:orientation(horizontal) > Button:not(:first-child) {
  border-left-width: 0;
}

/* Styles if `orientation="vertical"`. */

.root:splitButton:orientation(vertical) {
  flex-direction: column;
}

.root:splitButton:orientation(vertical) > Button:not(:first-child),
.root:splitButton:orientation(vertical) > Button:not(:first-child)::after {
  border-top-right-radius: 0;
  border-top-left-radius: 0;
}

.root:splitButton:orientation(vertical) > Button:not(:last-child),
.root:splitButton:orientation(vertical) > Button:not(:last-child)::after {
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}

.root:splitButton:orientation(vertical) > Button:not(:first-child) {
  border-top-width: 0;
}

/* = We need to set a border button when in a group. */

/* = horizontal - border-left */
.root:splitButton:orientation(horizontal) Button:not(:first-child) {
  border-left: var(--seperator-width) solid var(--seperator-color)
}

/* = vertical - border-top */
.root:splitButton:orientation(vertical) Button:not(:first-child) {
  border-top: var(--seperator-width) solid var(--seperator-color)
}
