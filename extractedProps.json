[
  {
    "name": "ActionButton",
    "fileName": "src/ActionButton/ActionButton.tsx",
    "description": "ActionButtons allow users to perform an action.\nThey’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.",
    "interface": {
      "name": "ActionButtonProps",
      "package": "@actionishope/shelley",
      "target": 1,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLButtonElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/button": [
          {
            "name": "aria-controls",
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-expanded",
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-haspopup",
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-pressed",
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "children",
            "description": "The content to display in the button.",
            "type": "ReactNode",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "href",
            "description": "A URL to link to if elementType=\"a\".",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the button is disabled.",
            "type": "boolean",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "rel",
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "target",
            "description": "The target window for the link.",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "type",
            "description": "The behavior of the button when used in an HTML form.",
            "source": "@react-types/button",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "excludeFromTabOrder",
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPress",
            "description": "Handler that is called when the press is released over the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressChange",
            "description": "Handler that is called when the press state changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressEnd",
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressStart",
            "description": "Handler that is called when a press interaction starts.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressUp",
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "description": "Classname",
            "type": "string",
            "required": false
          },
          {
            "name": "icon",
            "description": "Define an Icon node, postion via #iconPos.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "iconPos",
            "description": "The position of the icon relative to the label.",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "isQuiet",
            "type": "boolean",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Blockquote",
    "fileName": "src/Blockquote/Blockquote.tsx",
    "description": "Blockquote...",
    "interface": {
      "name": "BlockquoteProps",
      "package": "@actionishope/shelley",
      "target": 66,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLQuoteElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "desc",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "descVol",
            "description": "Changes the volume of the description. *",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant type. *",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Button",
    "fileName": "src/Button/Button.tsx",
    "description": "Button component capable of adapting to various element types (e.g., \"button\", \"a\", or a router \"Link\").\nUtilizes `react-aria` for accessibility features. see [Example](http://example.com)",
    "interface": {
      "name": "ButtonProps",
      "package": "@actionishope/shelley",
      "target": 329,
      "typeArguments": [
        "P",
        "V",
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/button": [
          {
            "name": "aria-controls",
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-expanded",
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-haspopup",
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-pressed",
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "children",
            "description": "The content to display in the button.",
            "type": "ReactNode",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the button is disabled.",
            "type": "boolean",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "rel",
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "target",
            "description": "The target window for the link.",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "type",
            "description": "The behavior of the button when used in an HTML form.",
            "source": "@react-types/button",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "excludeFromTabOrder",
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPress",
            "description": "Handler that is called when the press is released over the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressChange",
            "description": "Handler that is called when the press state changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressEnd",
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressStart",
            "description": "Handler that is called when a press interaction starts.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressUp",
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "description": "Custom `className` for overriding styles.",
            "type": "string",
            "required": false
          },
          {
            "name": "elementType",
            "description": "Custom element to render such as an anchor \"a\" or a router \"Link\" component.",
            "type": "P",
            "required": false
          },
          {
            "name": "fullWidth",
            "description": "Applies width of 100%.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "icon",
            "description": "Define an Icon node, postion via #iconPos.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "iconPos",
            "description": "The position of the icon relative to the label.",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "tone",
            "description": "Tone index, defines the color palette.",
            "type": "ExtendedToneVariants",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant defines the 'look'.",
            "type": "ExtendedButtonVariants",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the Button should be in term of it's size.",
            "type": "Volume",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "ButtonGroup",
    "fileName": "src/ButtonGroup/ButtonGroup.tsx",
    "description": "ButtonGroup can be used to group related buttons in various orientations.",
    "interface": {
      "name": "ButtonGroupProps",
      "package": "@actionishope/shelley",
      "target": 403,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "buttonClassName",
            "description": "Adds a class to each button.",
            "type": "string",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Disables all the buttons.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "orientation",
            "description": "Orient around vertical or horizontal.",
            "required": false
          },
          {
            "name": "splitButton",
            "description": "Use a split button style.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "tone",
            "description": "Tone index.",
            "type": "Tone",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant index.",
            "type": "ButtonVariants",
            "required": false
          },
          {
            "name": "vol",
            "description": "Changes the volume of the buttons.",
            "type": "Volume",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Cell",
    "fileName": "src/TableView/index.ts",
    "interface": {
      "name": "ShelleyCellProps",
      "package": "@actionishope/shelley",
      "target": 6157,
      "typeArguments": []
    },
    "params": {
      "ref": false,
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "align",
            "description": "The alignment of the column's contents relative to its allotted width.",
            "required": false
          },
          {
            "name": "className",
            "description": "Custom className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-column-value",
            "description": "Hold the value of the column to be used in responsive tables.",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          }
        ],
        "@react-types/table": [
          {
            "name": "children",
            "description": "The contents of the cell.",
            "type": "ReactNode",
            "source": "@react-types/table",
            "required": true
          },
          {
            "name": "textValue",
            "description": "A string representation of the cell's contents, used for features like typeahead.",
            "type": "string",
            "source": "@react-types/table",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Checkbox",
    "fileName": "src/Checkbox/Checkbox.tsx",
    "interface": {
      "name": "CheckboxProps",
      "package": "@actionishope/shelley",
      "target": 670,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLInputElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/checkbox": [
          {
            "name": "aria-controls",
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "type": "string",
            "source": "@react-types/checkbox",
            "required": false
          },
          {
            "name": "children",
            "description": "The label for the element.",
            "type": "ReactNode",
            "source": "@react-types/checkbox",
            "required": false
          },
          {
            "name": "defaultSelected",
            "description": "Whether the element should be selected (uncontrolled).",
            "type": "boolean",
            "source": "@react-types/checkbox",
            "required": false
          },
          {
            "name": "isIndeterminate",
            "description": "Indeterminism is presentational only.\nThe indeterminate visual representation remains regardless of user interaction.",
            "type": "boolean",
            "source": "@react-types/checkbox",
            "required": false
          },
          {
            "name": "isSelected",
            "description": "Whether the element should be selected (controlled).",
            "type": "boolean",
            "source": "@react-types/checkbox",
            "required": false
          },
          {
            "name": "onChange",
            "description": "Handler that is called when the element's selection state changes.",
            "source": "@react-types/checkbox",
            "required": false
          },
          {
            "name": "value",
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "type": "string",
            "source": "@react-types/checkbox",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-errormessage",
            "description": "Identifies the element that provides an error message for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "excludeFromTabOrder",
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the input is disabled.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isInvalid",
            "description": "Whether the input value is invalid.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isReadOnly",
            "description": "Whether the input can be selected but not changed by the user.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "name",
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validate",
            "description": "A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior=\"native\"`. For realtime validation, use the `isInvalid`\nprop instead.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationBehavior",
            "description": "Whether to use native HTML form validation to prevent form submission\nwhen the value is missing or invalid, or mark the field as required\nor invalid via ARIA.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationState",
            "description": "",
            "type": "ValidationState",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "inputPosition",
            "description": "The position of the label relative to the label.",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "size",
            "description": "Size of the actual input.",
            "type": "Size",
            "required": false
          },
          {
            "name": "visuallyHideLabel",
            "description": "Visually hide the label so it is still accessible to assistive technologies.",
            "type": "boolean",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "CheckboxGroup",
    "fileName": "src/CheckboxGroup/CheckboxGroup.tsx",
    "interface": {
      "name": "CheckboxGroupProps",
      "package": "@actionishope/shelley",
      "target": 924,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-errormessage",
            "description": "Identifies the element that provides an error message for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "defaultValue",
            "description": "The default value (uncontrolled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "description",
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "errorMessage",
            "description": "An error message for the field.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the input is disabled.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isInvalid",
            "description": "Whether the input value is invalid.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isReadOnly",
            "description": "Whether the input can be selected but not changed by the user.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "label",
            "description": "The content to display as the label.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "name",
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onChange",
            "description": "Handler that is called when the value changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validate",
            "description": "A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior=\"native\"`. For realtime validation, use the `isInvalid`\nprop instead.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationBehavior",
            "description": "Whether to use native HTML form validation to prevent form submission\nwhen the value is missing or invalid, or mark the field as required\nor invalid via ARIA.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationState",
            "description": "",
            "type": "ValidationState",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "value",
            "description": "The current value (controlled).",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "The Checkboxes contained within the CheckboxGroup.",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "descriptionProps",
            "description": "Props for the help text description element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "errorMessageProps",
            "description": "Props for the help text error message element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "fieldContainerProps",
            "description": "Props for the field container.",
            "type": "FieldContainerProps",
            "required": false
          },
          {
            "name": "labelPosition",
            "description": "Position of the label.",
            "required": false
          },
          {
            "name": "labelProps",
            "description": "Props for the label element.",
            "type": "Omit",
            "required": false
          },
          {
            "name": "orientation",
            "description": "The axis the checkboxes should align with.",
            "type": "Orientation",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the field should be.",
            "type": "Volume",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Column",
    "fileName": "src/TableView/index.ts",
    "interface": {
      "name": "ShelleyColumnProps",
      "package": "@actionishope/shelley",
      "target": 6138,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": false,
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "align",
            "description": "The alignment of the column's contents relative to its allotted width.",
            "required": false
          },
          {
            "name": "className",
            "description": "Custom className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          }
        ],
        "@react-types/table": [
          {
            "name": "allowsSorting",
            "description": "Whether the column allows sorting.",
            "type": "boolean",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "childColumns",
            "description": "A list of child columns used when dynamically rendering nested child columns.",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "children",
            "description": "Static child columns or content to render as the column header.",
            "source": "@react-types/table",
            "required": true
          },
          {
            "name": "defaultWidth",
            "description": "The default width of the column.",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "isRowHeader",
            "description": "Whether a column is a [row header](https://www.w3.org/TR/wai-aria-1.1/#rowheader) and should be announced by assistive technology during row navigation.",
            "type": "boolean",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "maxWidth",
            "description": "The maximum width of the column.",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "minWidth",
            "description": "The minimum width of the column.",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "textValue",
            "description": "A string representation of the column's contents, used for accessibility announcements.",
            "type": "string",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "title",
            "description": "Rendered contents of the column if `children` contains child columns.",
            "type": "ReactNode",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "width",
            "description": "The width of the column.",
            "source": "@react-types/table",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "ComboBox",
    "fileName": "src/ComboBox/ComboBox.tsx",
    "description": "ComboBoxes combine a text entry with a picker menu, allowing users to filter longer lists to only the selections matching a query.",
    "interface": {
      "name": "ComboBoxProps",
      "package": "@actionishope/shelley",
      "target": 728,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference"
      },
      "props": {
        "@react-types/combobox": [
          {
            "name": "allowsCustomValue",
            "description": "Whether the ComboBox allows a non-item matching input value to be set.",
            "type": "boolean",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "defaultInputValue",
            "description": "The default value of the ComboBox input (uncontrolled).",
            "type": "string",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "defaultItems",
            "description": "The list of ComboBox items (uncontrolled).",
            "type": "Iterable",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "inputValue",
            "description": "The value of the ComboBox input (controlled).",
            "type": "string",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "items",
            "description": "The list of ComboBox items (controlled).",
            "type": "Iterable",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "menuTrigger",
            "description": "The interaction required to display the ComboBox menu.",
            "type": "MenuTriggerAction",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "onInputChange",
            "description": "Handler that is called when the ComboBox input value changes.",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "onOpenChange",
            "description": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
            "source": "@react-types/combobox",
            "required": false
          },
          {
            "name": "shouldFocusWrap",
            "description": "Whether keyboard navigation is circular.",
            "type": "boolean",
            "source": "@react-types/combobox",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "children",
            "description": "The contents of the collection.",
            "type": "CollectionChildren",
            "source": "@react-types/shared",
            "required": true
          },
          {
            "name": "defaultSelectedKey",
            "description": "The initial selected key in the collection (uncontrolled).",
            "type": "Key",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "description",
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disabledKeys",
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "errorMessage",
            "description": "An error message for the field.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the input is disabled.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isInvalid",
            "description": "Whether the input value is invalid.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isReadOnly",
            "description": "Whether the input can be selected but not changed by the user.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "label",
            "description": "The content to display as the label.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "name",
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onSelectionChange",
            "description": "Handler that is called when the selection changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "placeholder",
            "description": "Temporary text that occupies the text input when it is empty.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectedKey",
            "description": "The currently selected key in the collection (controlled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validate",
            "description": "A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior=\"native\"`. For realtime validation, use the `isInvalid`\nprop instead.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationBehavior",
            "description": "Whether to use native HTML form validation to prevent form submission\nwhen the value is missing or invalid, or mark the field as required\nor invalid via ARIA.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationState",
            "description": "",
            "type": "ValidationState",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "descriptionProps",
            "description": "Props for the help text description element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "disableLabelTransition",
            "description": "Disable the label transition.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "errorMessageProps",
            "description": "Props for the help text error message element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "fieldContainerProps",
            "description": "Props for the field container.",
            "type": "FieldContainerProps",
            "required": false
          },
          {
            "name": "hasValue",
            "description": "Does the containing input have a value.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "labelPosition",
            "description": "Position of the label.",
            "type": "LabelPosition",
            "required": false
          },
          {
            "name": "labelProps",
            "description": "Props for the label element.",
            "type": "Omit",
            "required": false
          },
          {
            "name": "loadingMoreString",
            "description": "'Loading more' string for progress loader",
            "required": false
          },
          {
            "name": "loadingState",
            "description": "The current loading state of the ComboBox. Determines whether or\nnot the progress circle should be shown.",
            "type": "LoadingState",
            "required": false
          },
          {
            "name": "loadingString",
            "description": "'Loading' string for progress loader",
            "required": false
          },
          {
            "name": "onLoadMore",
            "description": "Handler that is called when more items should be loaded,\ne.g. while scrolling near the bottom.",
            "type": "LoadMore",
            "required": false
          },
          {
            "name": "placement",
            "description": "Disable the label transition.",
            "required": false
          },
          {
            "name": "portalSelector",
            "description": "The selector of the element that the menu should render inside of.",
            "type": "string",
            "required": false
          },
          {
            "name": "removeTrigger",
            "description": "Render with no Trigger.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "scrollLock",
            "description": "Enable scrollLock for the Popup, useful for infinate scrolls.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "shouldFocusOnHover",
            "description": "Should the ListBox items be focused on hover.\nUseful for scrolled lists to stop a jump on hover when reselecting.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "startAdornment",
            "description": "Place a component so as to appear inside the TextInput start.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "triggerIcon",
            "description": "Provide your own icon for the Trigger",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant index.",
            "type": "FieldVariants",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the field should be.",
            "type": "Volume",
            "required": false
          }
        ],
        "@react-types/overlays": [
          {
            "name": "crossOffset",
            "description": "The additional offset applied along the cross axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "offset",
            "description": "The additional offset applied along the main axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "shouldFlip",
            "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.",
            "type": "boolean",
            "source": "@react-types/overlays",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "ComboBoxMultiSelect",
    "fileName": "src/ComboBoxMultiSelect/ComboBoxMultiSelect.tsx",
    "interface": {
      "name": "ComboBoxMultiSelectProps",
      "package": "@actionishope/shelley",
      "target": 844,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "qualifiedName": "HTMLInputElement"
            },
            "name": "HTMLInputElement",
            "package": "typescript"
          },
          {
            "type": "reference",
            "target": 835,
            "typeArguments": [
              {
                "type": "reference",
                "target": 920,
                "name": "T",
                "package": "@actionishope/shelley",
                "refersToTypeParameter": true
              }
            ],
            "name": "ComboBoxMultiSelectRef",
            "package": "@actionishope/shelley"
          }
        ]
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "children as a render props where item and isSelected are parsed.",
            "type": "ComboboxMultiSelectRenderItemFunction",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "compareItems",
            "description": "Provide a function to compare items.",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "defaultInputValue",
            "description": "The default value of the MultiSelectComboBox input (adjusts selection).",
            "type": "string",
            "required": false
          },
          {
            "name": "defaultValue",
            "description": "Uncontrolled default value",
            "required": false
          },
          {
            "name": "descriptionProps",
            "description": "Props for the help text description element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "disableLabelTransition",
            "description": "Disable the label transition.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "enableBackspaceDelete",
            "description": "Enables deleting selected items on delete.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "errorMessageProps",
            "description": "Props for the help text error message element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "fieldContainerProps",
            "description": "Props for the field container.",
            "type": "FieldContainerProps",
            "required": false
          },
          {
            "name": "filterFunction",
            "description": "Provide a custom filter function.",
            "required": false
          },
          {
            "name": "hasValue",
            "description": "Does the containing input have a value.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "inputValue",
            "description": "Controlled input value.",
            "type": "string",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Enable disabled state.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isReadOnly",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "items",
            "description": "The list of items.",
            "required": false
          },
          {
            "name": "label",
            "description": "The label to associated with the input.",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "labelPosition",
            "description": "Position of the label.",
            "type": "LabelPosition",
            "required": false
          },
          {
            "name": "labelProps",
            "description": "Props for the label element.",
            "type": "Omit",
            "required": false
          },
          {
            "name": "loadingMoreString",
            "description": "'Loading more' string for progress loader",
            "required": false
          },
          {
            "name": "loadingState",
            "description": "The current loading state of the ComboBox. Determines whether or\nnot the progress circle should be shown.",
            "type": "LoadingState",
            "required": false
          },
          {
            "name": "loadingString",
            "description": "'Loading' string for progress loader",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "onBlur handler",
            "required": false
          },
          {
            "name": "onInputChange",
            "description": "Handler that is called when the MultiSelectComboBox input value changes.",
            "required": false
          },
          {
            "name": "onLoadMore",
            "description": "Handler that is called when more items should be loaded,\ne.g. while scrolling near the bottom.",
            "type": "LoadMore",
            "required": false
          },
          {
            "name": "onOpenChange",
            "description": "Callback fired when the dropdown is opened or closed.",
            "required": false
          },
          {
            "name": "onSelectionChange",
            "description": "Callback fired when a selection is made.",
            "required": false
          },
          {
            "name": "placeholder",
            "description": "A placeholder for the input.",
            "type": "string",
            "required": false
          },
          {
            "name": "placement",
            "description": "Disable the label transition.",
            "required": false
          },
          {
            "name": "portalSelector",
            "description": "The selector of the element that the menu should render inside of.",
            "type": "string",
            "required": false
          },
          {
            "name": "preventKeyAction",
            "description": "Default is never but you can set it to be always or only if the menu is Open.",
            "required": false
          },
          {
            "name": "removeTrigger",
            "description": "Render with no Trigger.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "resetHighlightedIndexOnSelect",
            "description": "On Selection change the highlighted index to 0",
            "type": "boolean",
            "required": false
          },
          {
            "name": "scrollLock",
            "description": "Enable scrollLock for the Popup, useful for infinate scrolls.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "startAdornment",
            "description": "Place a component so as to appear inside the TextInput start.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "triggerIcon",
            "description": "Provide your own icon for the Trigger",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "validationState",
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "type": "ValidationState",
            "required": false
          },
          {
            "name": "value",
            "description": "Controlled value",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant index.",
            "type": "FieldVariants",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the field should be.",
            "type": "Volume",
            "required": false
          }
        ],
        "@react-types/overlays": [
          {
            "name": "crossOffset",
            "description": "The additional offset applied along the cross axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "offset",
            "description": "The additional offset applied along the main axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "shouldFlip",
            "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.",
            "type": "boolean",
            "source": "@react-types/overlays",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "description",
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "errorMessage",
            "description": "An error message for the field.",
            "source": "@react-types/shared",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Dialog",
    "fileName": "src/Dialog/Dialog.tsx",
    "description": "Dialogs are windows containing contextual information, tasks, or workflows that appear over the user interface.\nDepending on the kind of Dialog, further interactions may be blocked until the Dialog is acknowledged.",
    "interface": {
      "name": "DialogProps",
      "package": "@actionishope/shelley",
      "target": 979,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "The contents of the Dialog.",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "closeIcon",
            "description": "An icon to use as your close icon.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "dismissLabel",
            "description": "A aria-label for the close button.",
            "type": "string",
            "required": false
          },
          {
            "name": "isDismissable",
            "description": "Whether the Dialog is dismissable. See the [examples](#examples) for more details.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "onDismiss",
            "description": "Handler that is called when the 'x' button of a dismissable Dialog is clicked.",
            "required": false
          },
          {
            "name": "size",
            "description": "The size of the Dialog. Only applies to \"modal\" type Dialogs.",
            "required": false
          }
        ],
        "@react-types/dialog": [
          {
            "name": "role",
            "description": "The accessibility role for the dialog.",
            "source": "@react-types/dialog",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "DialogTrigger",
    "fileName": "src/Dialog/DialogTrigger.tsx",
    "description": "DialogTrigger serves as a wrapper around a Dialog and its associated trigger, linking the Dialog's\nopen state with the trigger's press state. Additionally, it allows you to customize the type of Dialog.",
    "interface": {
      "name": "DialogTriggerProps",
      "package": "@actionishope/shelley",
      "target": 1360,
      "typeArguments": []
    },
    "params": {
      "ref": false,
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "The Dialog and its trigger element.",
            "required": true
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "disableModalBackdropBlur",
            "type": "boolean",
            "required": false
          },
          {
            "name": "focusOnProps",
            "description": "Props for the internal `FocusOn` component\nsee - https://github.com/theKashey/react-focus-on#api",
            "type": "TriggerFocusOnProps",
            "required": false
          },
          {
            "name": "hideArrow",
            "description": "Whether a popup type Dialog's arrow should be hidden.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isDismissable",
            "description": "Whether a modal type Dialog should be dismissable.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isKeyboardDismissDisabled",
            "description": "Whether pressing the escape key to close the dialog should\nbe disabled.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "modalClassName",
            "description": "Add a custom class to the Modal.",
            "type": "string",
            "required": false
          },
          {
            "name": "popupClassName",
            "description": "Add a custom class to the Popup.",
            "type": "string",
            "required": false
          },
          {
            "name": "portalSelector",
            "description": "The selector of the element that the Dialog should render inside of.",
            "required": false
          },
          {
            "name": "shouldCloseOnBlur",
            "description": "Whether the popup type Dialog should close when focus\nis lost or moves outside it.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "targetRef",
            "description": "The ref of the element a popup type Dialog should visually\nattach itself to. Defaults to the trigger button if not\ndefined.",
            "type": "RefObject",
            "required": false
          },
          {
            "name": "transition",
            "type": "TransitionType",
            "required": false
          },
          {
            "name": "transitionProps",
            "type": "TriggerTransitionProps",
            "required": false
          },
          {
            "name": "type",
            "description": "The type of Dialog that should be rendered.",
            "type": "OverlayType",
            "required": false
          }
        ],
        "@react-types/overlays": [
          {
            "name": "containerPadding",
            "description": "The placement padding that should be applied between the element and its\nsurrounding container.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "crossOffset",
            "description": "The additional offset applied along the cross axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "defaultOpen",
            "description": "Whether the overlay is open by default (uncontrolled).",
            "type": "boolean",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "isOpen",
            "description": "Whether the overlay is open by default (controlled).",
            "type": "boolean",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "offset",
            "description": "The additional offset applied along the main axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "onOpenChange",
            "description": "Handler that is called when the overlay's open state changes.",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "placement",
            "description": "The placement of the element with respect to its anchor element.",
            "type": "Placement",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "shouldFlip",
            "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.",
            "type": "boolean",
            "source": "@react-types/overlays",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Disclosure",
    "fileName": "src/DisclosureGroup/Disclosure.tsx",
    "interface": {
      "name": "DisclosureProps",
      "package": "@actionishope/shelley",
      "target": 1399,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "collapseString",
            "description": "Icon alt text in an expanded state.",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "defaultExpanded",
            "description": "defaultExpanded",
            "type": "boolean",
            "required": false
          },
          {
            "name": "disableRegion",
            "description": "disable role=region useful when using large numbers that might create landmark region proliferation.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "expandString",
            "description": "Icon alt text in a collapsed state.",
            "type": "string",
            "required": false
          },
          {
            "name": "iconAltVisible",
            "description": "Visually render the icon alt text.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "iconPos",
            "description": "Icon position \"top\" | \"end\" | \"bottom\" | \"start\"",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "isExpanded",
            "description": "isExpanded",
            "type": "boolean",
            "required": false
          },
          {
            "name": "onExpandedChange",
            "description": "Callback fired when trigger is selected.",
            "required": false
          },
          {
            "name": "title",
            "description": "Disclosure title",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "triggerIcon",
            "description": "Provide your own icon for the Trigger",
            "type": "VFC",
            "required": false
          },
          {
            "name": "triggerProps",
            "description": "Button props, for icoon use triggerIcon.",
            "type": "Omit",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "DisclosureGroup",
    "fileName": "src/DisclosureGroup/DisclosureGroup.tsx",
    "description": "DisclosureGroup is responsible for rendering a collection of disclosures",
    "interface": {
      "name": "DisclosureGroupProps",
      "package": "@actionishope/shelley",
      "target": 1678,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "Childen or function if using items.",
            "type": "DisclosureChildren",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "disableRegion",
            "description": "disable role=region useful when using large numbers that might create landmark region proliferation.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "iconPos",
            "description": "Icon position \"top\" | \"end\" | \"bottom\" | \"start\"",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "items",
            "description": "Disclosure array of items",
            "required": false
          },
          {
            "name": "singleView",
            "description": "Only one Disclosure will open at a time (accordian).",
            "type": "boolean",
            "required": false
          },
          {
            "name": "triggerIcon",
            "description": "Provide your own icon for the Trigger",
            "type": "VFC",
            "required": false
          },
          {
            "name": "triggerProps",
            "description": "Button props, for icoon use triggerIcon.",
            "type": "Omit",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Field",
    "fileName": "src/Field/Field.tsx",
    "interface": {
      "name": "FieldInternalProps",
      "package": "@actionishope/shelley",
      "target": 3529,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "descriptionProps",
            "description": "Props for the help text description element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "disableLabelTransition",
            "description": "Disable the label transition.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "endAdornment",
            "description": "Place a component so as to appear inside the TextInput end.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "errorMessageProps",
            "description": "Props for the help text error message element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "fieldContainerProps",
            "description": "Props for the field container.",
            "type": "FieldContainerProps",
            "required": false
          },
          {
            "name": "hasValue",
            "description": "Does the containing input have a value.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Enable disabled state.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isReadOnly",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "label",
            "description": "The label to associated with the input.",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "labelPosition",
            "description": "Position of the label.",
            "type": "LabelPosition",
            "required": false
          },
          {
            "name": "labelProps",
            "description": "Props for the label element.",
            "type": "Omit",
            "required": false
          },
          {
            "name": "startAdornment",
            "description": "Place a component so as to appear inside the TextInput start.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "validationState",
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "type": "ValidationState",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant index.",
            "type": "FieldVariants",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the field should be.",
            "type": "Volume",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "description",
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "errorMessage",
            "description": "An error message for the field.",
            "source": "@react-types/shared",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Grid",
    "fileName": "src/Grid/Grid.tsx",
    "description": "Grid allows you to share common grids and allows for formatted content areas.",
    "interface": {
      "name": "GridProps",
      "package": "@actionishope/shelley",
      "target": 1951,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "formatted",
            "description": "Designed to toggle child formatting/alignment rules.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "tag",
            "description": "HTML tag to render as the root for your grid.",
            "type": "string",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant index.",
            "type": "string",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "H1",
    "fileName": "src/Text/index.tsx",
    "description": "H1 is a page title and there should only be one on the page.",
    "interface": {
      "name": "TextExports",
      "package": "@actionishope/shelley",
      "target": 6278,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "H2",
    "fileName": "src/Text/index.tsx",
    "description": "H2 is a page heading level 2.",
    "interface": {
      "name": "TextExports",
      "package": "@actionishope/shelley",
      "target": 6278,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "H3",
    "fileName": "src/Text/index.tsx",
    "description": "H3 is a page heading level 3.",
    "interface": {
      "name": "TextExports",
      "package": "@actionishope/shelley",
      "target": 6278,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "H4",
    "fileName": "src/Text/index.tsx",
    "description": "H4 is a page heading level 4.",
    "interface": {
      "name": "TextExports",
      "package": "@actionishope/shelley",
      "target": 6278,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "H5",
    "fileName": "src/Text/index.tsx",
    "description": "H5 is a page heading level 5.",
    "interface": {
      "name": "TextExports",
      "package": "@actionishope/shelley",
      "target": 6278,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "H6",
    "fileName": "src/Text/index.tsx",
    "description": "H6 is a page heading level 6.",
    "interface": {
      "name": "TextExports",
      "package": "@actionishope/shelley",
      "target": 6278,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "HelpText",
    "fileName": "src/HelpText/HelpText.tsx",
    "interface": {
      "name": "HelpTextProps",
      "package": "@actionishope/shelley",
      "target": 2214,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "description",
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "descriptionProps",
            "description": "Props for the help text description element.",
            "type": "HTMLAttributes",
            "required": false
          },
          {
            "name": "errorMessage",
            "description": "An error message for the field.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "errorMessageProps",
            "description": "Props for the help text error message element.",
            "type": "HTMLAttributes",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the description is displayed with lighter text.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "showErrorIcon",
            "description": "Whether an error icon is rendered.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "validationState",
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "type": "ValidationState",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Icon",
    "fileName": "src/Icon/Icon.tsx",
    "description": "Icon allows you to share common grids and allows for formatted content areas.",
    "interface": {
      "name": "IconProps",
      "package": "@actionishope/shelley",
      "target": 2590,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "SVGSVGElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "alt",
            "description": "Alternative text via VisuallyHidden",
            "type": "string",
            "required": false
          },
          {
            "name": "altVisible",
            "description": "Visually render the alt text provided.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "viewBox",
            "description": "Set to match icon set; e.g. for Material UI icons use \"0 0 24 24\".",
            "type": "string",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "IconButton",
    "fileName": "src/IconButton/IconButton.tsx",
    "interface": {
      "name": "IconButtonProps",
      "package": "@actionishope/shelley",
      "target": 3069,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLButtonElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/button": [
          {
            "name": "aria-controls",
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-expanded",
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-haspopup",
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "aria-pressed",
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "children",
            "description": "The content to display in the button.",
            "type": "ReactNode",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "href",
            "description": "A URL to link to if elementType=\"a\".",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the button is disabled.",
            "type": "boolean",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "rel",
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "target",
            "description": "The target window for the link.",
            "type": "string",
            "source": "@react-types/button",
            "required": false
          },
          {
            "name": "type",
            "description": "The behavior of the button when used in an HTML form.",
            "source": "@react-types/button",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "excludeFromTabOrder",
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPress",
            "description": "Handler that is called when the press is released over the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressChange",
            "description": "Handler that is called when the press state changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressEnd",
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressStart",
            "description": "Handler that is called when a press interaction starts.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressUp",
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "description": "Classname",
            "type": "string",
            "required": false
          },
          {
            "name": "icon",
            "description": "Define an Icon node, postion via #iconPos.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "iconPos",
            "description": "The position of the icon relative to the label.",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the Button should be in term of it's size.",
            "type": "Volume",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "InputAdornment",
    "fileName": "src/InputAdornment/InputAdornment.tsx",
    "interface": {
      "name": "HTMLAttributes",
      "package": "@types/react",
      "target": {
        "sourceFileName": "node_modules/@types/react/index.d.ts",
        "qualifiedName": "React.HTMLAttributes"
      },
      "typeArguments": [
        "HTMLSpanElement"
      ]
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLSpanElement",
        "package": "typescript"
      },
      "props": {}
    }
  },
  {
    "name": "Item",
    "fileName": "src/Item/index.ts",
    "interface": {
      "name": "ItemProps",
      "package": "@react-types/shared",
      "target": {
        "sourceFileName": "node_modules/@react-types/shared/src/collections.d.ts",
        "qualifiedName": "ItemProps"
      },
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": false,
      "props": {}
    }
  },
  {
    "name": "Label",
    "fileName": "src/Label/Label.tsx",
    "description": "Label is for labeling form elements, mostly it should be styled by parents.",
    "interface": {
      "name": "LabelProps",
      "package": "@actionishope/shelley",
      "target": 3983,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLLabelElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "inputControl",
            "description": "An optional input to shove inside the label.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "inputPosition",
            "description": "The position of the label relative to the input.",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Wraps the label text in VisuallyHidden container.",
            "type": "boolean",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "ListBox",
    "fileName": "src/ListBox/ListBox.tsx",
    "interface": {
      "name": "ListBoxProps",
      "package": "@actionishope/shelley",
      "target": 3917,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLUListElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "defaultSelectedKeys",
            "description": "The initial selected keys in the collection (uncontrolled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disabledKeys",
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disallowEmptySelection",
            "description": "Whether the collection allows empty selection.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "items",
            "description": "Item objects in the collection.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onSelectionChange",
            "description": "Handler that is called when the selection changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectedKeys",
            "description": "The currently selected keys in the collection (controlled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectionMode",
            "description": "The type of selection that is allowed in the collection.",
            "type": "SelectionMode",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@react-types/listbox": [
          {
            "name": "autoFocus",
            "description": "Whether to auto focus the listbox or an option.",
            "source": "@react-types/listbox",
            "required": false
          },
          {
            "name": "label",
            "description": "An optional visual label for the listbox.",
            "type": "ReactNode",
            "source": "@react-types/listbox",
            "required": false
          },
          {
            "name": "onAction",
            "description": "Handler that is called when a user performs an action on an item. The exact user event depends on\nthe collection's `selectionBehavior` prop and the interaction modality.",
            "source": "@react-types/listbox",
            "required": false
          },
          {
            "name": "selectionBehavior",
            "description": "How multiple selection should behave in the collection.",
            "type": "SelectionBehavior",
            "source": "@react-types/listbox",
            "required": false
          },
          {
            "name": "shouldFocusWrap",
            "description": "Whether focus should wrap around when the end/start is reached.",
            "type": "boolean",
            "source": "@react-types/listbox",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "children",
            "type": "CollectionChildren",
            "required": false
          },
          {
            "name": "className",
            "description": "ClassName if you need/want a style hook.",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "loadingMoreString",
            "description": "'Loading more' string for progress loader",
            "required": false
          },
          {
            "name": "loadingState",
            "description": "The current loading state of the ComboBox. Determines whether or\nnot the progress circle should be shown.",
            "type": "LoadingState",
            "required": false
          },
          {
            "name": "loadingString",
            "description": "'Loading' string for progress loader",
            "required": false
          },
          {
            "name": "state",
            "type": "ListState",
            "required": false
          }
        ],
        "@react-aria/listbox": [
          {
            "name": "isVirtualized",
            "description": "Whether the listbox uses virtual scrolling.",
            "type": "boolean",
            "source": "@react-aria/listbox",
            "required": false
          },
          {
            "name": "keyboardDelegate",
            "description": "An optional keyboard delegate implementation for type to select,\nto override the default.",
            "type": "KeyboardDelegate",
            "source": "@react-aria/listbox",
            "required": false
          },
          {
            "name": "linkBehavior",
            "description": "The behavior of links in the collection.\n- 'action': link behaves like onAction.\n- 'selection': link follows selection interactions (e.g. if URL drives selection).\n- 'override': links override all other interactions (link items are not selectable).",
            "source": "@react-aria/listbox",
            "required": false
          },
          {
            "name": "shouldFocusOnHover",
            "description": "Whether options should be focused when the user hovers over them.",
            "type": "boolean",
            "source": "@react-aria/listbox",
            "required": false
          },
          {
            "name": "shouldSelectOnPressUp",
            "description": "Whether selection should occur on press up instead of press down.",
            "type": "boolean",
            "source": "@react-aria/listbox",
            "required": false
          },
          {
            "name": "shouldUseVirtualFocus",
            "description": "Whether the listbox items should use virtual focus instead of being focused directly.",
            "type": "boolean",
            "source": "@react-aria/listbox",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "ListBoxOption",
    "fileName": "src/ListBoxOption/ListBoxOption.tsx",
    "interface": {
      "name": "ListBoxOptionProps",
      "package": "@actionishope/shelley",
      "target": 3975,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": false,
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "item",
            "type": "Node",
            "required": true
          },
          {
            "name": "selectedIcon",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "shouldFocusOnHover",
            "description": "Whether options should be focused when the user hovers over them.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "shouldSelectOnPressUp",
            "description": "Whether selection should occur on press up instead of press down.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "state",
            "type": "ListState",
            "required": true
          }
        ]
      }
    }
  },
  {
    "name": "Menu",
    "fileName": "src/Menu/Menu.tsx",
    "interface": {
      "name": "MenuProps",
      "package": "@actionishope/shelley",
      "target": 4629,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLUListElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "children",
            "description": "The contents of the collection.",
            "type": "CollectionChildren",
            "source": "@react-types/shared",
            "required": true
          },
          {
            "name": "defaultSelectedKeys",
            "description": "The initial selected keys in the collection (uncontrolled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disabledKeys",
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disallowEmptySelection",
            "description": "Whether the collection allows empty selection.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "items",
            "description": "Item objects in the collection.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onSelectionChange",
            "description": "Handler that is called when the selection changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectedKeys",
            "description": "The currently selected keys in the collection (controlled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectionMode",
            "description": "The type of selection that is allowed in the collection.",
            "type": "SelectionMode",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@react-types/menu": [
          {
            "name": "autoFocus",
            "description": "Where the focus should be set.",
            "source": "@react-types/menu",
            "required": false
          },
          {
            "name": "onAction",
            "description": "Handler that is called when an item is selected.",
            "source": "@react-types/menu",
            "required": false
          },
          {
            "name": "onClose",
            "description": "Handler that is called when the menu should close after selecting an item.",
            "source": "@react-types/menu",
            "required": false
          },
          {
            "name": "shouldFocusWrap",
            "description": "Whether keyboard navigation is circular.",
            "type": "boolean",
            "source": "@react-types/menu",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "description": "ClassName if you need/want a style hook.",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "MenuItem",
    "fileName": "src/MenuItem/MenuItem.tsx",
    "interface": {
      "name": "MenuItemProps",
      "package": "@actionishope/shelley",
      "target": 4666,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": false,
      "props": {
        "@react-aria/menu": [
          {
            "name": "aria-controls",
            "description": "Identifies the menu item's popup element whose contents or presence is controlled by the menu item.",
            "type": "string",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "aria-expanded",
            "description": "Indicates whether the menu item's popup element is expanded or collapsed.",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "aria-haspopup",
            "description": "What kind of popup the item opens.",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "A screen reader only label for the menu item.",
            "type": "string",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "closeOnSelect",
            "description": "Whether the menu should close when the menu item is selected.",
            "type": "boolean",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the menu item is disabled.",
            "type": "boolean",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "isSelected",
            "description": "Whether the menu item is selected.",
            "type": "boolean",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "isVirtualized",
            "description": "Whether the menu item is contained in a virtual scrolling menu.",
            "type": "boolean",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "key",
            "description": "The unique key for the menu item.",
            "type": "Key",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "onAction",
            "description": "Handler that is called when the user activates the item.",
            "source": "@react-aria/menu",
            "required": false
          },
          {
            "name": "onClose",
            "description": "Handler that is called when the menu should close after selecting an item.",
            "source": "@react-aria/menu",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "highlight",
            "type": "boolean",
            "required": false
          },
          {
            "name": "item",
            "type": "Node",
            "required": true
          },
          {
            "name": "selectedIcon",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "selectionMode",
            "type": "SelectionMode",
            "required": false
          },
          {
            "name": "state",
            "type": "TreeState",
            "required": true
          }
        ],
        "@react-types/shared": [
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onHoverChange",
            "description": "Handler that is called when the hover state changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onHoverEnd",
            "description": "Handler that is called when a hover interaction ends.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onHoverStart",
            "description": "Handler that is called when a hover interaction starts.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPress",
            "description": "Handler that is called when the press is released over the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressChange",
            "description": "Handler that is called when the press state changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressEnd",
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressStart",
            "description": "Handler that is called when a press interaction starts.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onPressUp",
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "source": "@react-types/shared",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "MenuTrigger",
    "fileName": "src/MenuTrigger/MenuTrigger.tsx",
    "interface": {
      "name": "MenuTriggerProps",
      "package": "@actionishope/shelley",
      "target": 4356,
      "typeArguments": []
    },
    "params": {
      "ref": false,
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "The contents of the MenuTrigger - a trigger and a Menu.",
            "required": true
          },
          {
            "name": "closeOnSelect",
            "description": "Whether the Menu closes when a selection is made.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "crossOffset",
            "description": "The additional offset applied along the cross axis between the menu and its\ntrigger element.",
            "type": "number",
            "required": false
          },
          {
            "name": "defaultOpen",
            "description": "Whether the overlay is open by default (uncontrolled).",
            "type": "boolean",
            "required": false
          },
          {
            "name": "disabled",
            "description": "Disables the menu popup.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "hideArrow",
            "description": "hide the Popup arrow",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isOpen",
            "description": "Whether the overlay is open by default (controlled).",
            "type": "boolean",
            "required": false
          },
          {
            "name": "offset",
            "description": "The additional offset applied along the main axis between the menu and its\ntrigger element.",
            "type": "number",
            "required": false
          },
          {
            "name": "onOpenChange",
            "description": "Handler that is called when the overlay's open state changes.",
            "required": false
          },
          {
            "name": "placement",
            "description": "The placement of the menu with respect to the trigger.",
            "type": "Placement",
            "required": false
          },
          {
            "name": "popupClassName",
            "description": "Override the Popup style via this classname",
            "type": "string",
            "required": false
          },
          {
            "name": "portalSelector",
            "description": "The selector of the element that the menu should render inside of.",
            "type": "string",
            "required": false
          },
          {
            "name": "shouldFlip",
            "description": "Whether the menu should automatically flip direction when space is limited.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "trigger",
            "description": "How the menu is triggered.",
            "type": "MenuTriggerType",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Modal",
    "fileName": "src/Modal/Modal.tsx",
    "description": "Modal provides the structure for a Modal including transitions and\nfocus locks required to keep a user focused inside active dialogs without\nbeing able to 'wonder about' behind the backdrop.",
    "interface": {
      "name": "ModalProps",
      "package": "@actionishope/shelley",
      "target": 4744,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "Accepts any renderable content.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "contentClassName",
            "description": "Add a class to the content div.",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "disableBackdropClick",
            "description": "Disables the backdrop click dismiss",
            "type": "boolean",
            "required": false
          },
          {
            "name": "disableEscapeKey",
            "description": "Disables the EscapeKey dismiss",
            "type": "boolean",
            "required": false
          },
          {
            "name": "disableFocusLock",
            "description": "Disables the FocusLock - shortcut to focusOnProps",
            "type": "boolean",
            "required": false
          },
          {
            "name": "disableModalBackdropBlur",
            "type": "boolean",
            "required": false
          },
          {
            "name": "focusOnProps",
            "description": "Props for the internal `FocusOn` component see - https://github.com/theKashey/react-focus-on#api",
            "type": "Pick",
            "required": false
          },
          {
            "name": "initialFocusRef",
            "description": "Set the initial focused element via a ref. By default the\n'first focusable element' will receive focus when the dialog\nopens.",
            "required": false
          },
          {
            "name": "isOpen",
            "description": "Controls whether the dialog is open or not.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "onBackdropClick",
            "description": "Fires when the backdrop is clicked.",
            "required": false
          },
          {
            "name": "onDismiss",
            "description": "This function is called whenever the user hits \"Escape\" or clicks outside\nthe dialog. _It's important to close the dialog `onDismiss`_.\n\nThe only time you shouldn't close the dialog on dismiss is when the dialog\nrequires a choice and none of them are \"cancel\". For example, perhaps two\nrecords need to be merged and the user needs to pick the surviving record.\nNeither choice is less destructive than the other, so in these cases you\nmay want to alert the user they need to a make a choice on dismiss instead\nof closing the dialog.",
            "required": false
          },
          {
            "name": "portalSelector",
            "description": "The selector of the element that the menu should render inside of.",
            "required": false
          },
          {
            "name": "transition",
            "description": "Type of transition",
            "type": "TransitionType",
            "required": false
          },
          {
            "name": "transitionProps",
            "description": "Props for the internal `CSSTransition` component see - https://reactcommunity.org/react-transition-group/css-transition",
            "type": "Omit",
            "required": false
          },
          {
            "name": "variant",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Notification",
    "fileName": "src/Notification/Notification.tsx",
    "description": "Notification displays various notifications.",
    "interface": {
      "name": "NotificationProps",
      "package": "@actionishope/shelley",
      "target": 5023,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "aria-label",
            "description": "Provide a description for \"close\" icon button that can be read by screen readers",
            "type": "string",
            "required": false
          },
          {
            "name": "children",
            "description": "Content to be rendered inside the component.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "className",
            "description": "Additional class name to be provided for the root element.",
            "type": "string",
            "required": false
          },
          {
            "name": "closeIcon",
            "description": "Optional close icon",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "errorIcon",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "hideCloseButton",
            "description": "Should the close button be visible",
            "type": "boolean",
            "required": false
          },
          {
            "name": "infoIcon",
            "description": "Icons",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "role",
            "description": "By default, this value is \"info\". You can also provide an alternate",
            "required": false
          },
          {
            "name": "subtitle",
            "description": "Optional subtitle",
            "type": "string",
            "required": false
          },
          {
            "name": "successIcon",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "title",
            "description": "Optional title",
            "type": "string",
            "required": false
          },
          {
            "name": "warningIcon",
            "type": "ReactNode",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "P",
    "fileName": "src/Text/index.tsx",
    "description": "P is a paragrapgh.",
    "interface": {
      "name": "TextExports",
      "package": "@actionishope/shelley",
      "target": 6278,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Popup",
    "fileName": "src/Popup/Popup.tsx",
    "description": "A Popup can be used to display some content on top of another; used internally in components like MenuTrigger and DialogTrigger.",
    "interface": {
      "name": "PopupProps",
      "package": "@actionishope/shelley",
      "target": 5291,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/overlays": [
          {
            "name": "containerPadding",
            "description": "The placement padding that should be applied between the element and its\nsurrounding container.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "crossOffset",
            "description": "The additional offset applied along the cross axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "offset",
            "description": "The additional offset applied along the main axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "placement",
            "description": "The placement of the element with respect to its anchor element.",
            "type": "Placement",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "shouldFlip",
            "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.",
            "type": "boolean",
            "source": "@react-types/overlays",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "focusOnProps",
            "description": "Props for the internal `FocusOn` component see - https://github.com/theKashey/react-focus-on#api",
            "type": "Pick",
            "required": false
          },
          {
            "name": "hideArrow",
            "description": "Hide the arrow",
            "type": "boolean",
            "required": false
          },
          {
            "name": "loadingState",
            "description": "If set to 'idle' an attempt to call onLoadMore on opening\nwill be made until all available height is taken up and a\nscrollbar is present.",
            "type": "LoadingState",
            "required": false
          },
          {
            "name": "onLoadMore",
            "description": "Loadmore callback for when the scroller hits the bottom\nOR when 'filling' up the available space.",
            "type": "LoadMore",
            "required": false
          },
          {
            "name": "triggerRef",
            "description": "The ref for the element which the popup positions itself with respect to.",
            "type": "Ref",
            "required": true
          },
          {
            "name": "width",
            "description": "Specify a width for the popup as in ComboBox.",
            "type": "number",
            "required": false
          }
        ],
        "@react-aria/overlays": [
          {
            "name": "isDismissable",
            "description": "Whether to close the overlay when the user interacts outside it.",
            "type": "boolean",
            "source": "@react-aria/overlays",
            "required": false
          },
          {
            "name": "isKeyboardDismissDisabled",
            "description": "Whether pressing the escape key to close the overlay should be disabled.",
            "type": "boolean",
            "source": "@react-aria/overlays",
            "required": false
          },
          {
            "name": "isOpen",
            "description": "Whether the overlay is currently open.",
            "type": "boolean",
            "source": "@react-aria/overlays",
            "required": false
          },
          {
            "name": "onClose",
            "description": "Handler that is called when the overlay should close.",
            "source": "@react-aria/overlays",
            "required": false
          },
          {
            "name": "shouldCloseOnBlur",
            "description": "Whether the overlay should close when focus is lost or moves outside it.",
            "type": "boolean",
            "source": "@react-aria/overlays",
            "required": false
          },
          {
            "name": "shouldCloseOnInteractOutside",
            "description": "When user interacts with the argument element outside of the overlay ref,\nreturn true if onClose should be called.  This gives you a chance to filter\nout interaction with elements that should not dismiss the overlay.\nBy default, onClose will always be called on interaction outside the overlay ref.",
            "source": "@react-aria/overlays",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "ProgressBar",
    "fileName": "src/ProgressBar/ProgressBar.tsx",
    "description": "ProgressBars show the progression of a system operation such as downloading, uploading, or processing, in a visual way.\nThey can represent determinate or indeterminate progress.",
    "interface": {
      "name": "ProgressBarProps",
      "package": "@actionishope/shelley",
      "target": 5591,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "description": "The class name for the root element.",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "size",
            "description": "What the ProgressBar's size should be.",
            "required": false
          },
          {
            "name": "totalSteps",
            "description": "The total number of steps in the progress bar.",
            "type": "number",
            "required": false
          },
          {
            "name": "variant",
            "description": "The [visual style](https://spectrum.adobe.com/page/progress-bar/#Over-background-variant) of the ProgressBar.",
            "required": false
          },
          {
            "name": "vol",
            "description": "The volume of the labels.",
            "type": "Volume",
            "required": false
          }
        ],
        "@react-types/progress": [
          {
            "name": "isIndeterminate",
            "description": "Whether presentation is indeterminate when progress isn't known.",
            "type": "boolean",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "label",
            "description": "The content to display as the label.",
            "type": "ReactNode",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "maxValue",
            "description": "The largest value allowed for the input.",
            "type": "number",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "minValue",
            "description": "The smallest value allowed for the input.",
            "type": "number",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "value",
            "description": "The current value (controlled).",
            "type": "number",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "valueLabel",
            "description": "The content to display as the value's label (e.g. 1 of 4).",
            "type": "ReactNode",
            "source": "@react-types/progress",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "ProgressCircle",
    "fileName": "src/ProgressCircle/ProgressCircle.tsx",
    "description": "ProgressCircles show the progression of a system operation such as downloading, uploading, or processing, in a visual way.\nThey can represent determinate or indeterminate progress.",
    "interface": {
      "name": "ProgressCircleProps",
      "package": "@actionishope/shelley",
      "target": 5574,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "size",
            "description": "What the ProgressCircle's diameter should be.",
            "required": false
          },
          {
            "name": "variant",
            "description": "The [visual style](https://spectrum.adobe.com/page/progress-circle/#Over-background-variant) of the ProgressCircle.",
            "required": false
          }
        ],
        "@react-types/progress": [
          {
            "name": "isIndeterminate",
            "description": "Whether presentation is indeterminate when progress isn't known.",
            "type": "boolean",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "maxValue",
            "description": "The largest value allowed for the input.",
            "type": "number",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "minValue",
            "description": "The smallest value allowed for the input.",
            "type": "number",
            "source": "@react-types/progress",
            "required": false
          },
          {
            "name": "value",
            "description": "The current value (controlled).",
            "type": "number",
            "source": "@react-types/progress",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Radio",
    "fileName": "src/Radio/Radio.tsx",
    "interface": {
      "name": "RadioProps",
      "package": "@actionishope/shelley",
      "target": 5612,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLInputElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@react-types/radio": [
          {
            "name": "children",
            "description": "The label for the Radio. Accepts any renderable node.",
            "type": "ReactNode",
            "source": "@react-types/radio",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the radio button is disabled or not.\nShows that a selection exists, but is not available in that circumstance.",
            "type": "boolean",
            "source": "@react-types/radio",
            "required": false
          },
          {
            "name": "value",
            "description": "The value of the radio button, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio#Value).",
            "type": "string",
            "source": "@react-types/radio",
            "required": true
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "inputPosition",
            "description": "The position of the label relative to the label.",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "size",
            "description": "Size of the actual input",
            "type": "Size",
            "required": false
          },
          {
            "name": "visuallyHideLabel",
            "description": "Visually hide the label so it is still accessible to assistive technologies.",
            "type": "boolean",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "RadioGroup",
    "fileName": "src/RadioGroup/RadioGroup.tsx",
    "interface": {
      "name": "RadioGroupProps",
      "package": "@actionishope/shelley",
      "target": 5650,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-errormessage",
            "description": "Identifies the element that provides an error message for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "defaultValue",
            "description": "The default value (uncontrolled).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "description",
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "errorMessage",
            "description": "An error message for the field.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the input is disabled.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isInvalid",
            "description": "Whether the input value is invalid.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isReadOnly",
            "description": "Whether the input can be selected but not changed by the user.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "label",
            "description": "The content to display as the label.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "name",
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onChange",
            "description": "Handler that is called when the value changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validate",
            "description": "A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior=\"native\"`. For realtime validation, use the `isInvalid`\nprop instead.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationBehavior",
            "description": "Whether to use native HTML form validation to prevent form submission\nwhen the value is missing or invalid, or mark the field as required\nor invalid via ARIA.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationState",
            "description": "",
            "type": "ValidationState",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "value",
            "description": "The current value (controlled).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "children",
            "description": "The Radios contained within the RadioGroup.",
            "required": true
          },
          {
            "name": "className",
            "description": "Class",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "descriptionProps",
            "description": "Props for the help text description element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "errorMessageProps",
            "description": "Props for the help text error message element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "fieldContainerProps",
            "description": "Props for the field container.",
            "type": "FieldContainerProps",
            "required": false
          },
          {
            "name": "labelPosition",
            "description": "Position of the label.",
            "required": false
          },
          {
            "name": "labelProps",
            "description": "Props for the label element.",
            "type": "Omit",
            "required": false
          },
          {
            "name": "orientation",
            "description": "The axis the radios should align with.",
            "type": "Orientation",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the field should be.",
            "type": "Volume",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Row",
    "fileName": "node_modules/@react-stately/table/dist/types.d.ts",
    "description": "A Row represents a single item in a Table and contains Cell elements for each column.\nCells can be statically defined as children, or generated dynamically using a function\nbased on the columns defined in the TableHeader.",
    "interface": {
      "name": "RowProps",
      "package": "@react-types/table",
      "target": 6194,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": false,
      "props": {
        "@react-types/table": [
          {
            "name": "children",
            "description": "Rendered contents of the row or row child items.",
            "source": "@react-types/table",
            "required": true
          },
          {
            "name": "textValue",
            "description": "A string representation of the row's contents, used for features like typeahead.",
            "type": "string",
            "source": "@react-types/table",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "download",
            "description": "Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "href",
            "description": "A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "ping",
            "description": "A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "referrerPolicy",
            "description": "How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).",
            "type": "HTMLAttributeReferrerPolicy",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "rel",
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "target",
            "description": "The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).",
            "type": "any",
            "source": "@react-types/shared",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Select",
    "fileName": "src/Select/Select.tsx",
    "interface": {
      "name": "SelectProps",
      "package": "@actionishope/shelley",
      "target": 5705,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "defaultSelectedKey",
            "description": "The initial selected key in the collection (uncontrolled).",
            "type": "Key",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "description",
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disabledKeys",
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "errorMessage",
            "description": "An error message for the field.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isInvalid",
            "description": "Whether the input value is invalid.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isRequired",
            "description": "Whether user input is required on the input before form submission.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "items",
            "description": "Item objects in the collection.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "label",
            "description": "The content to display as the label.",
            "type": "ReactNode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onSelectionChange",
            "description": "Handler that is called when the selection changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "placeholder",
            "description": "Temporary text that occupies the text input when it is empty.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectedKey",
            "description": "The currently selected key in the collection (controlled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validate",
            "description": "A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior=\"native\"`. For realtime validation, use the `isInvalid`\nprop instead.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationBehavior",
            "description": "Whether to use native HTML form validation to prevent form submission\nwhen the value is missing or invalid, or mark the field as required\nor invalid via ARIA.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "validationState",
            "description": "",
            "type": "ValidationState",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@react-types/select": [
          {
            "name": "autoComplete",
            "description": "Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",
            "type": "string",
            "source": "@react-types/select",
            "required": false
          },
          {
            "name": "defaultOpen",
            "description": "Sets the default open state of the menu.",
            "type": "boolean",
            "source": "@react-types/select",
            "required": false
          },
          {
            "name": "isOpen",
            "description": "Sets the open state of the menu.",
            "type": "boolean",
            "source": "@react-types/select",
            "required": false
          },
          {
            "name": "name",
            "description": "The name of the input, used when submitting an HTML form.",
            "type": "string",
            "source": "@react-types/select",
            "required": false
          },
          {
            "name": "onOpenChange",
            "description": "Method that is called when the open state of the menu changes.",
            "source": "@react-types/select",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "children",
            "type": "CollectionChildren",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "descriptionProps",
            "description": "Props for the help text description element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "disableLabelTransition",
            "description": "Disable the label transition.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "errorMessageProps",
            "description": "Props for the help text error message element.",
            "type": "HTMLProps",
            "required": false
          },
          {
            "name": "fieldContainerProps",
            "description": "Props for the field container.",
            "type": "FieldContainerProps",
            "required": false
          },
          {
            "name": "hasValue",
            "description": "Does the containing input have a value.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Enable disabled state.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "labelPosition",
            "description": "Position of the label.",
            "type": "LabelPosition",
            "required": false
          },
          {
            "name": "labelProps",
            "description": "Props for the label element.",
            "type": "Omit",
            "required": false
          },
          {
            "name": "loadingMoreString",
            "description": "'Loading more' string for progress loader",
            "required": false
          },
          {
            "name": "loadingState",
            "description": "The current loading state of the ComboBox. Determines whether or\nnot the progress circle should be shown.",
            "type": "LoadingState",
            "required": false
          },
          {
            "name": "loadingString",
            "description": "'Loading' string for progress loader",
            "required": false
          },
          {
            "name": "onLoadMore",
            "description": "Handler that is called when more items should be loaded,\ne.g. while scrolling near the bottom.",
            "type": "LoadMore",
            "required": false
          },
          {
            "name": "placement",
            "description": "Disable the label transition.",
            "required": false
          },
          {
            "name": "portalSelector",
            "description": "The selector of the element that the menu should render inside of.",
            "type": "string",
            "required": false
          },
          {
            "name": "shouldFocusOnHover",
            "description": "Should the ListBox items be focused on hover.\nUseful for scrolled lists to stop a jump on hover when reselecting.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "triggerIcon",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant index.",
            "type": "FieldVariants",
            "required": false
          },
          {
            "name": "vol",
            "description": "Defines how 'loud' the field should be.",
            "type": "Volume",
            "required": false
          }
        ],
        "@react-aria/select": [
          {
            "name": "keyboardDelegate",
            "description": "An optional keyboard delegate implementation for type to select,\nto override the default.",
            "type": "KeyboardDelegate",
            "source": "@react-aria/select",
            "required": false
          }
        ],
        "@react-types/overlays": [
          {
            "name": "offset",
            "description": "The additional offset applied along the main axis between the element and its\nanchor element.",
            "type": "number",
            "source": "@react-types/overlays",
            "required": false
          },
          {
            "name": "shouldFlip",
            "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.",
            "type": "boolean",
            "source": "@react-types/overlays",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Switch",
    "fileName": "src/Switch/Switch.tsx",
    "interface": {
      "name": "SwitchProps",
      "package": "@actionishope/shelley",
      "target": 5794,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLInputElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/switch": [
          {
            "name": "aria-controls",
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "type": "string",
            "source": "@react-types/switch",
            "required": false
          },
          {
            "name": "children",
            "description": "The content to render as the Switch's label.",
            "type": "ReactNode",
            "source": "@react-types/switch",
            "required": false
          },
          {
            "name": "defaultSelected",
            "description": "Whether the Switch should be selected (uncontrolled).",
            "type": "boolean",
            "source": "@react-types/switch",
            "required": false
          },
          {
            "name": "isSelected",
            "description": "Whether the Switch should be selected (controlled).",
            "type": "boolean",
            "source": "@react-types/switch",
            "required": false
          },
          {
            "name": "onChange",
            "description": "Handler that is called when the Switch's selection state changes.",
            "source": "@react-types/switch",
            "required": false
          },
          {
            "name": "value",
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "type": "string",
            "source": "@react-types/switch",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "autoFocus",
            "description": "Whether the element should receive focus on render.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "excludeFromTabOrder",
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isDisabled",
            "description": "Whether the input is disabled.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "isReadOnly",
            "description": "Whether the input can be selected but not changed by the user.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "name",
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onBlur",
            "description": "Handler that is called when the element loses focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocus",
            "description": "Handler that is called when the element receives focus.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onFocusChange",
            "description": "Handler that is called when the element's focus status changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyDown",
            "description": "Handler that is called when a key is pressed.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onKeyUp",
            "description": "Handler that is called when a key is released.",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "inputPosition",
            "description": "The position of the label relative to the label.",
            "type": "AlignPos",
            "required": false
          },
          {
            "name": "size",
            "description": "Size of the actual input.",
            "type": "Size",
            "required": false
          },
          {
            "name": "visuallyHideLabel",
            "description": "Visually hide the label so it is still accessible to assistive technologies.",
            "type": "boolean",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "TableBody",
    "fileName": "node_modules/@react-stately/table/dist/types.d.ts",
    "description": "A TableBody is a container for the Row elements of a Table. Rows can be statically defined\nas children, or generated dynamically using a function based on the data passed to the `items` prop.",
    "interface": {
      "name": "TableBodyProps",
      "package": "@react-types/table",
      "target": 6183,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": false,
      "props": {
        "@react-types/table": [
          {
            "name": "children",
            "description": "The contents of the table body. Supports static items or a function for dynamic rendering.",
            "source": "@react-types/table",
            "required": true
          },
          {
            "name": "items",
            "description": "A list of row objects in the table body used when dynamically rendering rows.",
            "type": "Iterable",
            "source": "@react-types/table",
            "required": false
          },
          {
            "name": "loadingState",
            "description": "The current loading state of the table.",
            "type": "LoadingState",
            "source": "@react-types/table",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "onLoadMore",
            "description": "Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",
            "source": "@react-types/shared",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "TableHeader",
    "fileName": "node_modules/@react-stately/table/dist/types.d.ts",
    "description": "A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\nas children, or generated dynamically using a function based on the data passed to the `columns` prop.",
    "interface": {
      "name": "TableHeaderProps",
      "package": "@react-types/table",
      "target": 6179,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": false,
      "props": {
        "@react-types/table": [
          {
            "name": "children",
            "description": "A list of `Column(s)` or a function. If the latter, a list of columns must be provided using the `columns` prop.",
            "source": "@react-types/table",
            "required": true
          },
          {
            "name": "columns",
            "description": "A list of table columns.",
            "source": "@react-types/table",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "TablePagination",
    "fileName": "src/TablePagination/TablePagination.tsx",
    "description": "",
    "interface": {
      "name": "TablePaginationProps",
      "package": "@actionishope/shelley",
      "target": 5851,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "count",
            "type": "number",
            "required": true
          },
          {
            "name": "currentPage",
            "type": "number",
            "required": true
          },
          {
            "name": "data-testid",
            "type": "string",
            "required": false
          },
          {
            "name": "iconNext",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "iconPrev",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "id",
            "type": "string",
            "required": true
          },
          {
            "name": "labelDisplayedRows",
            "required": false
          },
          {
            "name": "labelRowsPerPage",
            "type": "string",
            "required": false
          },
          {
            "name": "nextIconButtonProps",
            "type": "ButtonProps",
            "required": false
          },
          {
            "name": "onPageChange",
            "required": true
          },
          {
            "name": "onRowsPerPageChange",
            "required": true
          },
          {
            "name": "prevIconButtonProps",
            "type": "ButtonProps",
            "required": false
          },
          {
            "name": "rowsPerPage",
            "type": "number",
            "required": true
          },
          {
            "name": "rowsPerPageOptions",
            "required": true
          }
        ]
      }
    }
  },
  {
    "name": "TableView",
    "fileName": "src/TableView/TableView.tsx",
    "description": "Tables are containers for displaying information. They allow users to quickly\nscan, sort, compare, and take action on large amounts of data.",
    "interface": {
      "name": "TableViewProps",
      "package": "@actionishope/shelley",
      "target": 6205,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLTableElement",
        "package": "typescript"
      },
      "props": {
        "@react-stately/selection": [
          {
            "name": "allowDuplicateSelectionEvents",
            "description": "Whether onSelectionChange should fire even if the new set of keys is the same as the last.",
            "type": "boolean",
            "source": "@react-stately/selection",
            "required": false
          },
          {
            "name": "disabledBehavior",
            "description": "Whether `disabledKeys` applies to all interactions, or only selection.",
            "type": "DisabledBehavior",
            "source": "@react-stately/selection",
            "required": false
          },
          {
            "name": "selectionBehavior",
            "description": "How multiple selection should behave in the collection.",
            "type": "SelectionBehavior",
            "source": "@react-stately/selection",
            "required": false
          }
        ],
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "defaultSelectedKeys",
            "description": "The initial selected keys in the collection (uncontrolled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disallowEmptySelection",
            "description": "Whether the collection allows empty selection.",
            "type": "boolean",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onSelectionChange",
            "description": "Handler that is called when the selection changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onSortChange",
            "description": "Handler that is called when the sorted column or direction changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectedKeys",
            "description": "The currently selected keys in the collection (controlled).",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectionMode",
            "description": "The type of selection that is allowed in the collection.",
            "type": "SelectionMode",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "sortDescriptor",
            "description": "The current sorted column and direction.",
            "type": "SortDescriptor",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@react-stately/table": [
          {
            "name": "children",
            "description": "The elements that make up the table. Includes the TableHeader, TableBody, Columns, and Rows.",
            "source": "@react-stately/table",
            "required": false
          },
          {
            "name": "collection",
            "description": "A pre-constructed collection to use instead of building one from items and children.",
            "type": "TableCollection",
            "source": "@react-stately/table",
            "required": false
          },
          {
            "name": "disabledKeys",
            "description": "A list of row keys to disable.",
            "type": "Iterable",
            "source": "@react-stately/table",
            "required": false
          },
          {
            "name": "showSelectionCheckboxes",
            "description": "Whether the row selection checkboxes should be displayed.",
            "type": "boolean",
            "source": "@react-stately/table",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "density",
            "description": "Density",
            "required": false
          },
          {
            "name": "isResponsive",
            "description": "Add responsive data-column-value attributes for mobile rendering.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "Vols of the table",
            "required": false
          }
        ],
        "@react-aria/grid": [
          {
            "name": "focusMode",
            "description": "Whether initial grid focus should be placed on the grid row or grid cell.",
            "source": "@react-aria/grid",
            "required": false
          },
          {
            "name": "getRowText",
            "description": "A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.",
            "source": "@react-aria/grid",
            "required": false
          },
          {
            "name": "keyboardDelegate",
            "description": "An optional keyboard delegate implementation for type to select,\nto override the default.",
            "type": "KeyboardDelegate",
            "source": "@react-aria/grid",
            "required": false
          },
          {
            "name": "onCellAction",
            "description": "Handler that is called when a user performs an action on the cell.",
            "source": "@react-aria/grid",
            "required": false
          },
          {
            "name": "onRowAction",
            "description": "Handler that is called when a user performs an action on the row.",
            "source": "@react-aria/grid",
            "required": false
          },
          {
            "name": "scrollRef",
            "description": "The ref attached to the scrollable body. Used to provided automatic scrolling on item focus for non-virtualized grids.",
            "type": "RefObject",
            "source": "@react-aria/grid",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Tabs",
    "fileName": "src/Tabs/Tabs.tsx",
    "interface": {
      "name": "TabsProps",
      "package": "@actionishope/shelley",
      "target": 6252,
      "typeArguments": [
        "T"
      ]
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@react-types/shared": [
          {
            "name": "aria-describedby",
            "description": "Identifies the element (or elements) that describes the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-details",
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-label",
            "description": "Defines a string value that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "aria-labelledby",
            "description": "Identifies the element (or elements) that labels the current element.",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "children",
            "description": "The contents of the collection.",
            "type": "CollectionChildren",
            "source": "@react-types/shared",
            "required": true
          },
          {
            "name": "defaultSelectedKey",
            "description": "The initial selected key in the collection (uncontrolled).",
            "type": "Key",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "disabledKeys",
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "id",
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "type": "string",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "items",
            "description": "Item objects in the collection.",
            "type": "Iterable",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "onSelectionChange",
            "description": "Handler that is called when the selection changes.",
            "source": "@react-types/shared",
            "required": false
          },
          {
            "name": "selectedKey",
            "description": "The currently selected key in the collection (controlled).",
            "source": "@react-types/shared",
            "required": false
          }
        ],
        "@actionishope/@shelley": [
          {
            "name": "className",
            "description": "Add a class to the content div.",
            "type": "string",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "vol",
            "description": "Sets the volume of the tabs, use `false` to unset",
            "required": false
          }
        ],
        "@react-types/tabs": [
          {
            "name": "isDisabled",
            "description": "Whether the TabList is disabled.\nShows that a selection exists, but is not available in that circumstance.",
            "type": "boolean",
            "source": "@react-types/tabs",
            "required": false
          },
          {
            "name": "keyboardActivation",
            "description": "Whether tabs are activated automatically on focus or manually.",
            "source": "@react-types/tabs",
            "required": false
          },
          {
            "name": "orientation",
            "description": "The orientation of the tabs.",
            "type": "Orientation",
            "source": "@react-types/tabs",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Text",
    "fileName": "src/Text/Text.tsx",
    "interface": {
      "name": "TextProps",
      "package": "@actionishope/shelley",
      "target": 6300,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLBaseElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "as",
            "description": "HTML as to render as this Text item.",
            "type": "string",
            "required": true
          },
          {
            "name": "displayName",
            "type": "string",
            "required": false
          },
          {
            "name": "truncate",
            "description": "Truncate text to specified line number.",
            "required": false
          },
          {
            "name": "uppercase",
            "description": "Toggles uppercase.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "description": "Visually hides the element, visible to screen readers.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "vol",
            "description": "How 'loud' should this Text be?",
            "type": "TextVolume",
            "required": false
          },
          {
            "name": "weight",
            "description": "Set the weight.",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "TextField",
    "fileName": "src/TextField/TextField.tsx",
    "interface": {
      "name": "InputTextProps",
      "package": "@actionishope/shelley",
      "target": 6735,
      "typeArguments": [
        null
      ]
    },
    "params": {
      "ref": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "qualifiedName": "HTMLInputElement"
            },
            "name": "HTMLInputElement",
            "package": "typescript"
          },
          {
            "type": "reference",
            "target": {
              "sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "qualifiedName": "HTMLTextAreaElement"
            },
            "name": "HTMLTextAreaElement",
            "package": "typescript"
          }
        ]
      },
      "props": {}
    }
  },
  {
    "name": "ToastProvider",
    "fileName": "src/Toast/ToastProvider.tsx",
    "description": "ToastProvider is responsible for rendering the toast region and in turn the toasts and managing the toast queue",
    "interface": {
      "name": "ToastProviderProps",
      "package": "@actionishope/shelley",
      "target": 6754,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "closeIcon",
            "description": "Override the close icon.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "data-id",
            "description": "Add predefined data-id to ease testing or analytics.",
            "type": "string",
            "required": false
          },
          {
            "name": "errorIcon",
            "description": "Override the error icon.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "hasExitAnimation",
            "description": "Turn off exit transitions.",
            "type": "boolean",
            "required": false
          },
          {
            "name": "infoIcon",
            "description": "Override the info icon.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "maxVisibleToasts",
            "description": "Be mindful of how often you trigger toasts. Frequent\ninterruptions interfere with usability, especially for\npeople with visual and cognitive disabilities\n(see WCAG Success Criterion 2.2.4 Interruptions).\nMultiple toasts will required different CSS and is not\nrecommended.",
            "type": "number",
            "required": false
          },
          {
            "name": "successIcon",
            "description": "Override the success icon.",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "warningIcon",
            "description": "Override the warning icon.",
            "type": "ReactNode",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "Toolbar",
    "fileName": "src/Toolbar/Toolbar.tsx",
    "description": "Toolbar housing buttons and slogans for use in headers and footers.",
    "interface": {
      "name": "ToolbarProps",
      "package": "@actionishope/shelley",
      "target": 6775,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLDivElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "align",
            "description": "Alignment of the toolbar.",
            "type": "TextAlign",
            "required": false
          },
          {
            "name": "as",
            "description": "Element type to render 'as'.",
            "type": "ElementType",
            "required": false
          },
          {
            "name": "variant",
            "description": "Variant index, defines the 'look'.",
            "type": "Variant",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "VisuallyHidden",
    "fileName": "src/VisuallyHidden/VisuallyHidden.tsx",
    "description": "VisuallyHidden provides text for screen readers that is visually hidden.\nIt is the logical opposite of the `aria-hidden` attribute.",
    "interface": {
      "name": "VisuallyHiddenProps",
      "package": "@actionishope/shelley",
      "target": 7038,
      "typeArguments": []
    },
    "params": {
      "ref": {
        "type": "reference",
        "name": "HTMLSpanElement",
        "package": "typescript"
      },
      "props": {
        "@actionishope/@shelley": [
          {
            "name": "focusable",
            "type": "boolean",
            "required": false
          },
          {
            "name": "visuallyHidden",
            "type": "boolean",
            "required": false
          }
        ]
      }
    }
  },
  {
    "name": "useToast",
    "fileName": "src/Toast/ToastProvider.tsx",
    "params": {
      "ref": false
    }
  }
]